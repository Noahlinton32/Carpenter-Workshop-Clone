[{"C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\index.js":"1","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\App.js":"2","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\students.js":"3","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\authContext.js":"4","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\Dashboard.js":"5","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\Login.js":"6","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\CreateIncident.js":"7","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\CreateStudent.js":"8","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\accidents.js":"9","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\CreateAccident.js":"10","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\incidents.js":"11","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\referrals.js":"12","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\CreateReferral.js":"13","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\profile.js":"14","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\Admin.js":"15","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\editIncident.js":"16","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\editAccident.js":"17","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\editStudent.js":"18","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\editReferral.js":"19","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\components\\Navbar\\index.js":"20","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\components\\Navbar\\NavbarElements.js":"21"},{"size":194,"mtime":1680530386000,"results":"22","hashOfConfig":"23"},{"size":5062,"mtime":1682968634748,"results":"24","hashOfConfig":"23"},{"size":2897,"mtime":1683001573909,"results":"25","hashOfConfig":"23"},{"size":1280,"mtime":1682441750438,"results":"26","hashOfConfig":"23"},{"size":602,"mtime":1682967586847,"results":"27","hashOfConfig":"23"},{"size":5597,"mtime":1682966087410,"results":"28","hashOfConfig":"23"},{"size":12976,"mtime":1680712704000,"results":"29","hashOfConfig":"23"},{"size":10208,"mtime":1682966128331,"results":"30","hashOfConfig":"23"},{"size":3637,"mtime":1682966128333,"results":"31","hashOfConfig":"23"},{"size":9695,"mtime":1682898469179,"results":"32","hashOfConfig":"23"},{"size":4217,"mtime":1682966128340,"results":"33","hashOfConfig":"23"},{"size":3440,"mtime":1682966128343,"results":"34","hashOfConfig":"23"},{"size":5960,"mtime":1682966128328,"results":"35","hashOfConfig":"23"},{"size":550,"mtime":1682394906644,"results":"36","hashOfConfig":"23"},{"size":12424,"mtime":1682729473310,"results":"37","hashOfConfig":"23"},{"size":17543,"mtime":1682903717954,"results":"38","hashOfConfig":"23"},{"size":10181,"mtime":1682891410544,"results":"39","hashOfConfig":"23"},{"size":9663,"mtime":1682966128337,"results":"40","hashOfConfig":"23"},{"size":7500,"mtime":1682966128335,"results":"41","hashOfConfig":"23"},{"size":1137,"mtime":1682395768485,"results":"42","hashOfConfig":"23"},{"size":1764,"mtime":1680728754000,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9qmgip",{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\index.js",[],[],"C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\App.js",["123","124","125"],[],"import {React, useEffect, useState} from 'react';\r\nimport Navbar from './components/Navbar';\r\nimport Login from './pages/Login';\r\nimport Students from './pages/students';\r\nimport { BrowserRouter as Router, Routes, Route} from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport styled, {createGlobalStyle, css} from 'styled-components';\r\nimport Dashboard from './pages/Dashboard';\r\nimport CreateStudents from './pages/CreateStudent';\r\nimport Incidents from './pages/incidents';\r\nimport CreateIncidents from './pages/CreateIncident';\r\nimport Accidents from './pages/accidents';\r\nimport CreateAccidents from './pages/CreateAccident';\r\nimport Referrals from './pages/referrals';\r\nimport CreateReferrals from './pages/CreateReferral';\r\nimport Profile from './pages/profile';\r\nimport AdminProfile from './pages/Admin';\r\nimport EditAccident from './pages/editAccident';\r\nimport EditIncident from './pages/editIncident';\r\nimport EditReferral from './pages/editReferral';\r\nimport EditStudent from './pages/editStudent';\r\nimport { AuthProvider,useAuth} from './authContext';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nfunction App() {\r\nreturn (\r\n  <>\r\n  <AuthProvider>\r\n    <Router>\r\n      <Navbar/>\r\n      <Routes>\r\n        {/* Wrap the entire app with the AuthProvider to make the authentication state available to all components */}\r\n        <Route exact path=\"/\" \r\n        element={\r\n        <Login/>\r\n        } />\r\n        {/* Other routes are wrapped with RequireAuth to protect them */}\r\n         <Route path=\"/dashboard\" \r\n        element={\r\n          <RequireAuth>\r\n        <Dashboard/>\r\n        </RequireAuth>\r\n        } />\r\n        <Route path=\"/students\" \r\n        element={\r\n          <RequireAuth>\r\n        <Students/>\r\n        </RequireAuth>\r\n        } />\r\n        <Route path=\"/students/create\" \r\n        element={\r\n          <RequireAuth>\r\n        <CreateStudents/>\r\n        </RequireAuth>\r\n        } />\r\n        <Route path=\"/students/edit/:id\" \r\n        element={\r\n          <RequireAuth>\r\n        <EditStudent/>\r\n        </RequireAuth>\r\n        } />\r\n        <Route path=\"/incidents\" \r\n        element={\r\n          <RequireAuth>\r\n        <Incidents/>\r\n        </RequireAuth>\r\n        } />\r\n        <Route path=\"/incidents/create\" \r\n        element={\r\n          <RequireAuth>\r\n        <CreateIncidents/>\r\n        </RequireAuth>\r\n        } />\r\n        <Route path=\"/incidents/edit/:id\" \r\n        element={\r\n          <RequireAuth>\r\n        <EditIncident/>\r\n        </RequireAuth>\r\n        } />\r\n        <Route path=\"/accidents\" \r\n        element={\r\n          <RequireAuth>\r\n        <Accidents/>\r\n        </RequireAuth>\r\n        } />\r\n        <Route path=\"/accidents/create\" \r\n        element={\r\n          <RequireAuth>\r\n        <CreateAccidents/>\r\n        </RequireAuth>\r\n        } />\r\n        <Route path=\"/accidents/edit/:id\" \r\n        element={\r\n          <RequireAuth>\r\n        <EditAccident/>\r\n        </RequireAuth>\r\n        } />\r\n        <Route path=\"/referrals\" \r\n        element={\r\n          <RequireAuth>\r\n        <Referrals/>\r\n        </RequireAuth>\r\n        } />\r\n        <Route path=\"/referrals/create\" \r\n        element={\r\n          <RequireAuth>\r\n        <CreateReferrals/>\r\n        </RequireAuth>\r\n        \r\n        } />\r\n        <Route path=\"/referrals/edit/:id\" \r\n        element={\r\n          <RequireAuth>\r\n        <EditReferral/>\r\n        </RequireAuth>\r\n        } />\r\n        <Route path=\"/profile\" \r\n        element={\r\n          <RequireAuth>\r\n        <Profile/>\r\n        </RequireAuth>\r\n        } />\r\n        <Route path=\"/admin\"\r\n        element={\r\n        <RequireAdmin>\r\n          <AdminProfile />\r\n        </RequireAdmin>\r\n        }\r\n          />\r\n      </Routes>\r\n    </Router>\r\n    </AuthProvider>\r\n    \r\n    </>\r\n)}\r\nfunction RequireAdmin({ children }) {\r\n  const auth = useAuth();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [isAllowed, setIsAllowed] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!auth.user) {\r\n      // If the user is not authenticated, redirect them to the login page\r\n      navigate(\"/\", { state: { from: location } });\r\n    } else if (!auth.user.isAdmin) {\r\n      // If the user is not an admin, redirect them to the dashboard\r\n      navigate(\"/dashboard\", { state: { from: location } });\r\n    } else {\r\n      // If the user is an admin, set isAllowed to true\r\n      setIsAllowed(true);\r\n    }\r\n  }, [auth.user, navigate, location]);\r\n\r\n  // Render the protected route only if the user is allowed (i.e., an admin)\r\n  return isAllowed ? children : null;\r\n}\r\nfunction RequireAuth({ children }) {\r\n  const auth = useAuth();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n      // If the user is not authenticated, redirect them to the login page\r\n    if (!auth.user) {\r\n      navigate(\"/\", { state: { from: location } });\r\n    }\r\n  }, [auth.user, navigate, location]);\r\n  // If the user is authenticated, render the protected route\r\n  return children;\r\n}\r\nexport default App;","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\students.js",["126","127"],[],"C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\authContext.js",[],[],"C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\Dashboard.js",["128","129"],[],"import React from 'react'\r\nimport styled, {createGlobalStyle, css} from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height: 100%;\r\n\r\n  }\r\n\r\n  body{\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    background: linear-gradient(to top, #d1913c, #ffd194);\r\n    background-attachment: fixed;\r\n    height: 100%;\r\n    margin: 0;\r\n    color: 555;\r\n  }\r\n`\r\nconst Dashboard = () => {\r\n  return (\r\n    <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', height: '90vh'}}>\r\n        <GlobalStyle/>\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\Login.js",["130","131","132","133"],[],"import logo from \"../components/Navbar/images/CSLogo.png\";\r\nimport axios from \"axios\";\r\nimport { useContext,  } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { AuthContext, useAuth } from \"../authContext\";\r\nimport { useState } from \"react\";\r\nimport styled, {createGlobalStyle, css} from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height: 100%;\r\n  }\r\n  body{\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    background: linear-gradient(to top, #d1913c, #ffd194);\r\n    background-attachment: fixed;\r\n    height: 100%;\r\n    margin: 0;\r\n    color: 555;\r\n  }\r\n`\r\nconst sharedStyles = css`\r\n  background-color: #eee;\r\n  height: 40px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ddd;\r\n  margin: 10px 0 20px 0;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n` \r\n\r\nconst StyledFormWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 2%;\r\n  height: 100%;\r\n  padding: 0 20px;\r\n  padding-bottom: 2%;\r\n`\r\nconst StyledForm = styled.form`\r\n  width: 100%;\r\n  max-width: 1000px;\r\n  padding: 40px; \r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  box-shadow: 0px 0px 20px 0px rgba(0,0,0,0.2);\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  display: block;\r\n  width: 100%;\r\n  ${sharedStyles}\r\n`\r\nconst StyledTextArea = styled.textarea`\r\n`\r\n\r\nconst StyledButton = styled.button`\r\n  display: block;\r\n  background-color: #D1913C;\r\n  color: #fff;\r\n  font-size: .9rem;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  height: 40px;\r\n  padding: 0 20px;\r\n  cursor: pointer;\r\n  boz-sizing: border-box;\r\n`\r\n\r\nconst styledFieldset = styled.fieldset`\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin: 20px 0;\r\n  \r\n  legend{\r\n    padding: 0 10px;\r\n  }\r\n  label{\r\n    padding-right: 20px;\r\n  }\r\n  input{\r\n    margin-right: 10px;\r\n  }\r\n  `\r\nconst StyledError = styled.div`\r\n  color: red;\r\n  font-weight: 800;\r\n  margin: 0 0 40px 0;\r\n`\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Login = () => {\r\n  // Get the login function from the authentication context\r\n  const { login: loginUser } = useContext(AuthContext);\r\n  const auth = useAuth();\r\n  // State to store the login form data\r\n  const [Login, setLogin] = useState({ username: \"\", password: \"\" });\r\n  // State to control whether the user should be redirected to the dashboard\r\n  const [redirectToDashboard, setRedirectToDashboard] = useState(false);\r\n  // The handleSubmit function is necessary because it acts as a wrapper around\r\n  // the getLogin function, which makes the API call to authenticate the user.\r\n  // By calling handleSubmit on form submission, we can prevent the default\r\n  // form submission behavior, which would cause a page reload and disrupt the\r\n  // user experience. Instead, we can call getLogin directly to perform the\r\n  // authentication process without causing any disruption to the user.\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const getLogin = async () => {\r\n    try {\r\n      const res = await axios.post(\"${process.env.REACT_APP_API_BASE_URL}/login\", {\r\n        username: Login.username,\r\n        password: Login.password,\r\n      });\r\n      console.log(\"Response from server:\", res.data);\r\n      if (res.data.success) {\r\n        if (res.data.user.isActive) { // Check if the user is active\r\n          loginUser(res.data);\r\n          setRedirectToDashboard(true);\r\n        } else {\r\n          // Set an error message if the user is not active\r\n          setErrorMessage(\"Your account is not active, please contact your system administrator.\");\r\n        }\r\n      } else {\r\n        setErrorMessage(\"Login failed\"); // Set an error message if the login failed\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during login:\", error);\r\n    }\r\n  };\r\n    // Handler for input changes in the login form\r\n    const handleChange = (e) => {\r\n      setLogin({ ...Login, [e.target.name]: e.target.value });\r\n    };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    getLogin();\r\n  };\r\n  \r\n  if (redirectToDashboard) {\r\n    return <Navigate to={auth.user.isAdmin ? \"/admin\" : \"/dashboard\"} />;\r\n  }\r\n  // Render the login form\r\n  return (\r\n    <>\r\n    <GlobalStyle/>\r\n    <div className=\"login-formParent\">\r\n      <StyledFormWrapper>\r\n        <StyledForm className=\"login-form\" onSubmit={handleSubmit}>\r\n          \r\n          <img src={logo} className=\"login-logo\" alt=\"carpetner logo\" style={{width: '100%', maxWidth:'850px'}}/>\r\n          <br />\r\n          <div className=\"login-border\">\r\n            <p className=\"login-text\">Student Access Management Portal (SAMP)</p>\r\n            {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n            <label htmlFor=\"userName\">Username: </label>\r\n            <StyledInput\r\n              type=\"text\"\r\n              placeholder=\"Employee ID\"\r\n              className=\"login-username\"\r\n              id=\"userName\"\r\n              name=\"username\"\r\n              onChange={handleChange}\r\n            />\r\n            <br />\r\n            <label htmlFor=\"password\">Password: </label>\r\n            <StyledInput\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              className=\"login-password\"\r\n              id=\"password\"\r\n              name=\"password\"\r\n              onChange={handleChange}\r\n            />\r\n            <br />\r\n            <StyledButton type=\"submit\" defaultValue=\"Login\" style={{margin: 'auto', width: '15%', minWidth:'100px'}}>Log in</StyledButton> \r\n          </div>\r\n        </StyledForm>\r\n      </StyledFormWrapper>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\CreateIncident.js",["134","135","136","137"],[],"import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport styled, {createGlobalStyle, css} from 'styled-components';\r\nimport {NavLink} from \"../components/Navbar/NavbarElements\";\r\nimport { Navigate, useNavigate } from \"react-router-dom\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height: 100%;\r\n\r\n  }\r\n\r\n  body{\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    background: linear-gradient(to top, #d1913c, #ffd194);\r\n    background-attachment: fixed;\r\n    height: 100%;\r\n    margin: 0;\r\n    color: 555;\r\n  }\r\n  input::-webkit-outer-spin-button,\r\n  input::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n`\r\nconst sharedStyles = css`\r\n  background-color: #eee;\r\n  height: 40px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ddd;\r\n  margin: 10px 0 20px 0;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n` \r\n\r\nconst StyledFormWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 2%;\r\n  height: 100%;\r\n  padding: 0 20px;\r\n  padding-bottom: 2%;\r\n\r\n`\r\nconst StyledForm = styled.form`\r\n  width: 100%;\r\n  max-width: 1000px;\r\n  padding: 40px; \r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  box-shadow: 0px 0px 20px 0px rgba(0,0,0,0.2);\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  display: block;\r\n  width: 100%;\r\n  ${sharedStyles}\r\n\r\n`\r\nconst StyledTextArea = styled.textarea`\r\n  background-color: #eee;\r\n  width: 100%;\r\n  min-height: 100px;\r\n  resize: none;\r\n  ${sharedStyles}\r\n`\r\n\r\nconst StyledButton = styled.button`\r\n  display: block;\r\n  background-color: #D1913C;\r\n  color: #fff;\r\n  font-size: .9rem;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  height: 40px;\r\n  padding: 0 20px;\r\n  cursor: pointer;\r\n  boz-sizing: border-box;\r\n\r\n`\r\n\r\nconst StyledFieldset = styled.fieldset`\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin: 20px 0;\r\n  \r\n  legend{\r\n    padding: 0 10px;\r\n  }\r\n\r\n  label{\r\n    padding-right: 20px;\r\n  }\r\n\r\n  input{\r\n    margin-right: 10px;\r\n  }\r\n  `\r\nconst StyledError = styled.div`\r\n  color: red;\r\n  font-weight: 800;\r\n  margin: 0 0 40px 0;\r\n`\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction CreateIncidents() {\r\n  // State\r\n  const [incidents, SetIncidents] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [createForm, SetCreateForm] = useState({\r\n    incidentReportNumber: '',\r\n    studentID: '',\r\n    agencyOrProgram: '',\r\n    contactNumber: '',\r\n    address: '',\r\n    incidentType: '', \r\n    incidentTypeOther: '',\r\n    location: '', \r\n    date: '', \r\n    employeeID: '', \r\n    firstNameParticipant: '', \r\n    lastNameParticipant: '', \r\n    dateTimeReport: '', \r\n    firstNameReport: '', \r\n    lastNameReport: '',\r\n    contactReportNumber: '', \r\n    contactReportEmail: '', \r\n    firstNameManager: '', \r\n    lastNameManager: '', \r\n    phoneNumberManager: '', \r\n    emailAddressManager: '', \r\n    signed: ''\r\n  });\r\n\r\n  //User Effect\r\n  useEffect (() => {\r\n    getIncidents();\r\n  }, []);\r\n\r\n  //Functions \r\n  const getIncidents = async () => {\r\n    //get incidents\r\n    const res = await axios.get('http://localhost:3000/incidents');\r\n    //set state\r\n    SetIncidents(res.data.incidents);\r\n  };\r\n\r\n  const UpdateCreateFormField = (e) => {\r\n    const {name, value} = e.target;\r\n\r\n    SetCreateForm({\r\n      ...createForm,\r\n      [name]: value,\r\n\r\n    })\r\n\r\n  };\r\n\r\n  const CreateIncident = async (e) => {\r\n    e.preventDefault();\r\n    //functions to check errors\r\n\r\n    //check errors here\r\n\r\n\r\n    // Create the incident\r\n    const res = await axios.post(\"http://localhost:3000/incidents\", createForm);\r\n    //Update state\r\n    console.log(res);\r\n    SetIncidents([...incidents, res.data.incident]);\r\n\r\n    //Clear form state\r\n    SetCreateForm({\r\n        incidentReportNumber: '',\r\n        studentID: '',\r\n        agencyOrProgram: '',\r\n        contactNumber: '',\r\n        address: '',\r\n        incidentType: '', \r\n        incidentTypeOther: '',\r\n        location: '', \r\n        date: '', \r\n        employeeID: '', \r\n        firstNameParticipant: '', \r\n        lastNameParticipant: '', \r\n        dateTimeReport: '', \r\n        firstNameReport: '', \r\n        lastNameReport: '',\r\n        contactReportNumber: '', \r\n        contactReportEmail: '', \r\n        firstNameManager: '', \r\n        lastNameManager: '', \r\n        phoneNumberManager: '', \r\n        emailAddressManager: '', \r\n        signed: '',\r\n    })\r\n  }\r\n  \r\n  return( \r\n    <>\r\n    <GlobalStyle/>\r\n      <StyledFormWrapper>\r\n        <StyledForm onSubmit={CreateIncident}>\r\n          <h2 style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>Create Incident</h2>\r\n          <label htmlFor=\"incidentReportNumber\">Incident Report Number: </label>\r\n            <StyledInput\r\n              onChange={UpdateCreateFormField}\r\n              value={createForm.incidentReportNumber}\r\n              name=\"incidentReportNumber\"\r\n              type=\"Number\"            \r\n            />\r\n            <label htmlFor=\"studentID\">Student ID: </label>\r\n            <StyledInput\r\n              onChange={UpdateCreateFormField}\r\n              value={createForm.studentID}\r\n              name='studentID'\r\n              type=\"Number\"\r\n            />\r\n            <label htmlFor=\"agencyOrProgram\">Agency or Program: </label>\r\n            <StyledInput\r\n              onChange={UpdateCreateFormField}\r\n              value={createForm.agencyOrProgram}\r\n              name=\"agencyOrProgram\"\r\n            />\r\n            <label htmlFor=\"contactNumber\">Contact Number: </label>\r\n            <StyledInput\r\n              onChange={UpdateCreateFormField}\r\n              value={createForm.contactNumber}\r\n              name=\"contactNumber\"\r\n              type=\"Number\"\r\n            />\r\n            <label htmlFor=\"address\">Address: </label>\r\n            <StyledInput\r\n              onChange={UpdateCreateFormField}\r\n              value={createForm.address}\r\n              name=\"address\"            \r\n            />\r\n            <StyledFieldset\r\n              onChange={UpdateCreateFormField}\r\n              value={createForm.incidentType}\r\n              name=\"incidentType\"\r\n            >\r\n              <legend>Incident Type</legend>\r\n                <label>\r\n                  <input type=\"radio\" value=\"Media Coverage\" name=\"incident\" />\r\n                  Media Coverage\r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" value=\"Program Awards\" name=\"incident\" />\r\n                  Program Awards\r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" value=\"Injury to Participant\" name=\"incident\" />\r\n                  Injury to Participant\r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" value=\"Illness\" name=\"incident\" />\r\n                  Illness                  \r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" value=\"Missing Participants\" name=\"incident\" />\r\n                  Missing Participants\r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" value=\"Notable Participant Achievements\" name=\"incident\" />\r\n                  Notable Participant Achievements\r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" value=\"Auto Accident\" name=\"incident\" />\r\n                  Auto Accident\r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" value=\"Injury to Employee\" name=\"incident\" />\r\n                  Injury to Employee\r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" value=\"Behavior Requiring Disciplinary Action\" name=\"incident\" />\r\n                  Behavior Requiring Disciplinary Action\r\n                </label>\r\n            </StyledFieldset>\r\n            <label htmlFor=\"incidentTypeOther\">Other: </label>\r\n            <StyledTextArea\r\n              onChange={UpdateCreateFormField}\r\n              value={createForm.incidentTypeOther}\r\n              name=\"incidentTypeOther\"\r\n            />\r\n            <label htmlFor=\"location\">Location: </label>\r\n            <StyledInput\r\n              onChange={UpdateCreateFormField}\r\n              value={createForm.location}\r\n              name=\"location\"\r\n            />\r\n            <label htmlFor=\"date\">Date: </label>\r\n            <StyledInput\r\n              onChange={UpdateCreateFormField}\r\n              value={createForm.date}\r\n              type=\"date\"\r\n              name=\"date\"\r\n            />\r\n            <label htmlFor=\"employeeID\">Employee ID: </label>\r\n            <StyledInput\r\n              onChange={UpdateCreateFormField}\r\n              value={createForm.employeeID}\r\n              name=\"employeeID\"\r\n            />\r\n            <div style={{display: 'grid', gridGap: '10px', gridTemplateColumns: '1fr 1fr' }}>\r\n              <div>\r\n                <label htmlFor=\"firstNameParticipant\">Participant's 1st Name: </label>\r\n                <StyledInput\r\n                  onChange={UpdateCreateFormField}\r\n                  value={createForm.firstNameParticipant}\r\n                  name=\"firstNameParticipant\"\r\n                />\r\n              </div>\r\n              <div>\r\n              <label htmlFor=\"lastNameParticipant\">Participant's Last Name: </label>\r\n                <StyledInput\r\n                onChange={UpdateCreateFormField}\r\n                value={createForm.lastNameParticipant}\r\n                name=\"lastNameParticipant\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div style={{display: 'grid', gridGap: '10px', gridTemplateColumns: '1fr 1fr' }}>\r\n              <div>\r\n                <label htmlFor=\"firstNameReport\">Reporter's 1st Name: </label>\r\n                <StyledInput\r\n                  onChange={UpdateCreateFormField}\r\n                  value={createForm.firstNameReport}\r\n                  name=\"firstNameReport\"\r\n                />\r\n              </div>\r\n              <div>\r\n              <label htmlFor=\"lastNameReport\">Reporter's Last Name: </label>\r\n                <StyledInput\r\n                onChange={UpdateCreateFormField}\r\n                value={createForm.lastNameReport}\r\n                name=\"lastNameReport\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <label htmlFor=\"contactReportNumber\">Reporter's Contact Number: </label>\r\n            <StyledInput\r\n              onChange={UpdateCreateFormField}\r\n              value={createForm.contactReportNumber}\r\n              name=\"contactReportNumber\"\r\n            />\r\n            <label htmlFor=\"contactReportEmail\">Reporter's Email: </label>\r\n            <StyledInput\r\n              onChange={UpdateCreateFormField}\r\n              value={createForm.contactReportEmail}\r\n              name=\"contactReportEmail\"\r\n              type=\"email\" \r\n            />\r\n            <div style={{display: 'grid', gridGap: '10px', gridTemplateColumns: '1fr 1fr' }}>\r\n              <div>\r\n                <label htmlFor=\"firstNameManager\">Managers's 1st Name: </label>\r\n                <StyledInput\r\n                  onChange={UpdateCreateFormField}\r\n                  value={createForm.firstNameManager}\r\n                  name=\"firstNameManager\"\r\n                />\r\n              </div>\r\n              <div>\r\n              <label htmlFor=\"lastNameManager\">Managers's Last Name: </label>\r\n                <StyledInput\r\n                onChange={UpdateCreateFormField}\r\n                value={createForm.lastNameManager}\r\n                name=\"lastNameManager\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <label htmlFor=\"phoneNumberManager\">Manager's Contact Number: </label>\r\n            <StyledInput\r\n              onChange={UpdateCreateFormField}\r\n              value={createForm.phoneNumberManager}\r\n              name=\"phoneNumberManager\"\r\n            />\r\n            <label htmlFor=\"emailAddressManager\">Manager's Email: </label>\r\n            <StyledInput\r\n              onChange={UpdateCreateFormField}\r\n              value={createForm.emailAddressManager}\r\n              name=\"emailAddressManager\"\r\n              type=\"email\"\r\n            />\r\n            <StyledFieldset\r\n              onChange={UpdateCreateFormField}\r\n              value={createForm.signed}\r\n              name=\"signed\"\r\n            >\r\n              <legend>Signed?</legend>\r\n                <label>\r\n                  <input type=\"radio\" value=\"Yes\" name=\"signed\" />\r\n                  Yes\r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" value=\"No\" name=\"signed\" />\r\n                  No\r\n                </label>\r\n            </StyledFieldset>\r\n            {error && (\r\n              <StyledError>\r\n              <p>{error}</p>\r\n              </StyledError>\r\n              )}\r\n\r\n            <StyledButton type=\"submit\">Create Incident</StyledButton>\r\n\r\n    </StyledForm>\r\n    </StyledFormWrapper>\r\n    </>\r\n  ); \r\n}\r\n\r\nexport default CreateIncidents;\r\n","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\CreateStudent.js",["138","139"],[],"import { useState, useEffect } from \"react\";\r\nimport styled, {createGlobalStyle, css} from 'styled-components';\r\nimport axios from \"axios\";\r\n\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height: 100%;\r\n\r\n  }\r\n\r\n  body{\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    background: linear-gradient(to top, #d1913c, #ffd194);\r\n    background-attachment: fixed;\r\n    height: 100%;\r\n    margin: 0;\r\n    color: 555;\r\n  }\r\n`\r\nconst sharedStyles = css`\r\n  background-color: #eee;\r\n  height: 40px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ddd;\r\n  margin: 10px 0 20px 0;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n` \r\n\r\nconst StyledFormWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 2%;\r\n  height: 100%;\r\n  padding: 0 20px;\r\n  padding-bottom: 2%;\r\n\r\n`\r\nconst StyledForm = styled.form`\r\n  width: 100%;\r\n  max-width: 1000px;\r\n  padding: 40px; \r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  box-shadow: 0px 0px 20px 0px rgba(0,0,0,0.2);\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  display: block;\r\n  width: 100%;\r\n  ${sharedStyles}\r\n\r\n`\r\nconst StyledTextArea = styled.textarea`\r\n\r\n`\r\n\r\nconst StyledButton = styled.button`\r\n  display: block;\r\n  background-color: #D1913C;\r\n  color: #fff;\r\n  font-size: .9rem;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  height: 40px;\r\n  padding: 0 20px;\r\n  cursor: pointer;\r\n  boz-sizing: border-box;\r\n\r\n`\r\n\r\nconst styledFieldset = styled.fieldset`\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin: 20px 0;\r\n  \r\n  legend{\r\n    padding: 0 10px;\r\n  }\r\n\r\n  label{\r\n    padding-right: 20px;\r\n  }\r\n\r\n  input{\r\n    margin-right: 10px;\r\n  }\r\n  `\r\nconst StyledError = styled.div`\r\n  color: red;\r\n  font-weight: 800;\r\n  margin: 0 0 40px 0;\r\n`\r\n\r\nfunction CreateStudents() {\r\n  // State\r\n  const [students, SetStudents] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [createForm, SetCreateForm] = useState({\r\n    studentID: '',\r\n    name: '',\r\n    address: '',\r\n    gpa: '', \r\n    grade: '', \r\n    firstNameFirstGuardian: '',\r\n    lastNameFirstGuardian: '', \r\n    firstNameSecondGuardian: '', \r\n    lastNameSecondGuardian: '',\r\n    emergencyNumber: '',\r\n    enrollmentDate: '',\r\n    graduationDate: '', \r\n    isActive: '1'\r\n  });\r\n\r\n  //User Effect\r\n  useEffect (() => {\r\n    getStudents();\r\n  }, []);\r\n\r\n  //Functions \r\n  const getStudents = async () => {\r\n    //get students\r\n    const res = await axios.get('http://localhost:3000/students');\r\n    //set state\r\n    SetStudents(res.data.students);\r\n  };\r\n\r\n  const UpdateCreateFormField = (e) => {\r\n    const {name, value} = e.target;\r\n\r\n    SetCreateForm({\r\n      ...createForm,\r\n      [name]: value,\r\n\r\n    })\r\n\r\n  };\r\n\r\n  const CreateStudent = async (e) => {\r\n    e.preventDefault();\r\n    //regex functions to validate format \r\n    //regex returns true if PHONE number is valid\r\n    function isValidPhone(phoneNumber) {\r\n      var found = phoneNumber.search(/^(\\+{1}\\d{2,3}\\s?[(]{1}\\d{1,3}[)]{1}\\s?\\d+|\\+\\d{2,3}\\s{1}\\d+|\\d+){1}[\\s|-]?\\d+([\\s|-]?\\d+){1,2}$/);\r\n      if(found > -1) {\r\n          return true;\r\n      }\r\n      else {\r\n          return false;\r\n      }\r\n    }\r\n    //regex returns true if DATE is valid\r\n    function isValidDate(date) {\r\n      var found = date.search(/(((19|20)([2468][048]|[13579][26]|0[48])|2000)[/-]02[/-]29|((19|20)[0-9]{2}[/-](0[4678]|1[02])[/-](0[1-9]|[12][0-9]|30)|(19|20)[0-9]{2}[/-](0[1359]|11)[/-](0[1-9]|[12][0-9]|3[01])|(19|20)[0-9]{2}[/-]02[/-](0[1-9]|1[0-9]|2[0-8])))/);\r\n      if(found > -1) {\r\n        return true;\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    //Check errors here\r\n\r\n    for (let key in createForm){\r\n      if (isNaN(createForm.studentID)){\r\n        setError(`Student ID must be a number`)\r\n        return\r\n       }\r\n      if (isNaN(createForm.gpa)){\r\n        setError(`GPA must be a number`)\r\n        return\r\n       }\r\n      if (parseFloat(createForm.gpa) > 4 || parseFloat(createForm.gpa) < 0){\r\n        setError(`GPA must be between 0 and 4`)\r\n        return\r\n       }\r\n      if (!isValidPhone(createForm.emergencyNumber)){\r\n        setError(`Emergency Number must be a valid number`)\r\n        return\r\n      }\r\n      if (!isValidDate(createForm.enrollmentDate)){\r\n        setError(`Enrollment Date must be a valid date`)\r\n        return\r\n      }\r\n      if (!isValidDate(createForm.graduationDate)){\r\n        setError(`Graduation Date must be a valid date`)\r\n        return\r\n      }\r\n      if (createForm[key] === ''){\r\n        setError(`${key} cannot be blank`)\r\n        return\r\n     }\r\n    }\r\n    setError('');\r\n\r\n\r\n    // Create the student\r\n    const res = await axios.post(\"http://localhost:3000/students\", createForm);\r\n    //Update state\r\n    console.log(res);\r\n    SetStudents([...students, res.data.student]);\r\n\r\n    //Clear form state\r\n    SetCreateForm({\r\n      studentID: '',\r\n      name: '',\r\n      address: '',\r\n      gpa: '', \r\n      grade: '', \r\n      firstNameFirstGuardian: '',\r\n      lastNameFirstGuardian: '', \r\n      firstNameSecondGuardian: '', \r\n      lastNameSecondGuardian: '',\r\n      emergencyNumber: '',\r\n      enrollmentDate: '',\r\n      graduationDate: '', \r\n      isActive: '1'\r\n    })\r\n    \r\n  }\r\n  \r\n  return( \r\n  <>\r\n  <GlobalStyle/>\r\n    <StyledFormWrapper>\r\n      <StyledForm onSubmit={CreateStudent}>\r\n        <h2 style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>Create Student</h2>\r\n          <label htmlFor=\"studentID\">Student ID: </label>\r\n          <StyledInput \r\n            onChange={UpdateCreateFormField}\r\n            value={createForm.studentID} \r\n            id=\"studentID\" type={Number} \r\n            name=\"studentID\"\r\n          />\r\n      \r\n          <label id=\"name\">Name: </label>\r\n          <StyledInput \r\n            type=\"text\"\r\n            onChange={UpdateCreateFormField}\r\n            value={createForm.name} \r\n            id=\"name\" \r\n            name=\"name\"\r\n          />\r\n               \r\n          <label htmlFor=\"address\" id=\"address\">Address: </label>\r\n          <StyledInput \r\n            onChange={UpdateCreateFormField}\r\n            value={createForm.address}\r\n            id=\"address\" \r\n            name=\"address\"\r\n            />\r\n         <div style={{display: 'grid', gridGap: '10px', gridTemplateColumns: '1fr 1fr' }}>\r\n          <div>\r\n          <label htmlFor=\"gpa\" id=\"gpa\">GPA: </label>\r\n          <input\r\n            onChange={UpdateCreateFormField} \r\n            value={createForm.gpa}\r\n            id=\"gpa\" \r\n            type={Number} \r\n            name=\"gpa\"\r\n            style={{width: '100%',\r\n            backgroundColor: '#eee',\r\n            height: '40px',\r\n            borderRadius: '5px',\r\n            border: '1px solid #ddd',\r\n            margin: '10px 0 20px 0',\r\n            padding: '20px',\r\n            boxSizing: 'border-box'}}\r\n            />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"grade\" id=\"grade\">Grade: </label>\r\n          <input\r\n            onChange={UpdateCreateFormField} \r\n            value={createForm.grade}\r\n            id=\"grade\" \r\n            name=\"grade\"\r\n            style={{width: '100%',\r\n            backgroundColor: '#eee',\r\n            height: '40px',\r\n            borderRadius: '5px',\r\n            border: '1px solid #ddd',\r\n            margin: '10px 0 20px 0',\r\n            padding: '20px',\r\n            boxSizing: 'border-box'}}\r\n            />\r\n        </div>\r\n          </div>\r\n           \r\n          <label htmlFor=\"firstNameFirstGuardian\" id=\"firstNameFirstGuardian\">First Name 1st Guardian: </label>     \r\n          <StyledInput\r\n            onChange={UpdateCreateFormField} \r\n            value={createForm.firstNameFirstGuardian}\r\n            id=\"firstNameFirstGuardian\" \r\n            name=\"firstNameFirstGuardian\"\r\n            />\r\n       \r\n          <label htmlFor=\"lastNameFirstGuardian\" id=\"lastNameFirstGuardian\">Last Name 1st Guardian: </label>\r\n          <StyledInput\r\n            onChange={UpdateCreateFormField} \r\n            value={createForm.lastNameFirstGuardian}\r\n            id=\"lastNameFirstGuardian\" \r\n            name=\"lastNameFirstGuardian\"\r\n            />\r\n\r\n          <label htmlFor=\"firstNameSecondGuardian\" id=\"firstNameSecondGuardian\">First Name 2nd Guardian: </label>\r\n          <StyledInput\r\n            onChange={UpdateCreateFormField} \r\n            value={createForm.firstNameSecondGuardian}\r\n            id=\"firstNameSecondGuardian\" \r\n            name=\"firstNameSecondGuardian\"\r\n            />\r\n  \r\n          <label htmlFor=\"lastNameSecondGuardian\" id=\"lastNameSecondGuardian\">Last Name 2nd Guardian: </label>\r\n          <StyledInput\r\n            onChange={UpdateCreateFormField} \r\n            value={createForm.lastNameSecondGuardian}\r\n            id=\"lastNameSecondGuardian\" \r\n            name=\"lastNameSecondGuardian\"\r\n            />\r\n         \r\n          <label htmlFor=\"emergencyNumber\" id=\"emergencyNumber\">Emergency Number: </label>\r\n          <StyledInput\r\n            onChange={UpdateCreateFormField} \r\n            value={createForm.emergencyNumber}\r\n            id=\"emergencyNumber\" \r\n            type={Number} \r\n            name=\"emergencyNumber\"\r\n            />\r\n          \r\n          <label htmlFor=\"enrollmentDate\" id=\"enrollmentDate\">Enrollment Date: </label>\r\n          <StyledInput\r\n            onChange={UpdateCreateFormField} \r\n            value={createForm.enrollmentDate}\r\n            id=\"enrollmentDate\" \r\n            type=\"Date\" \r\n            name=\"enrollmentDate\"/>\r\n          \r\n          <label htmlFor=\"graduationDate\" id=\"graduationDate\">Grad date: </label>\r\n          <StyledInput\r\n            onChange={UpdateCreateFormField} \r\n            value={createForm.graduationDate}\r\n            id=\"graduationDate\" \r\n            type=\"Date\" \r\n            name=\"graduationDate\"\r\n            />\r\n          \r\n          <StyledInput value=\"1\" type={\"hidden\"} name=\"isActive\"/>\r\n          \r\n          {error && (\r\n            <StyledError>\r\n            <p>{error}</p>\r\n            </StyledError>\r\n            )}\r\n          \r\n          <StyledButton type=\"submit\">Create Student</StyledButton>\r\n  </StyledForm>\r\n  </StyledFormWrapper>\r\n  </>\r\n  );\r\n   \r\n}\r\n\r\nexport default CreateStudents;\r\n","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\accidents.js",["140","141"],[],"import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {NavLink} from \"../components/Navbar/NavbarElements\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button } from \"react-bootstrap\";\r\nimport styled, {createGlobalStyle, css} from 'styled-components';\r\nimport { MDBDataTable } from 'mdbreact';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height: 100%;\r\n\r\n  }\r\n\r\n  body{\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    background: linear-gradient(to top, #d1913c, #ffd194);\r\n    background-attachment: fixed;\r\n    height: 100%;\r\n    margin: 0;\r\n    color: 555;\r\n  }\r\n\r\n`\r\n\r\n\r\n\r\nfunction Accidents() {\r\n  const [accidents, setAccidents] = useState(null);\r\n  useEffect (() => {\r\n    getAccidents();\r\n  }, []);\r\n\r\n  const getAccidents = async () => {\r\n    const res = await axios.get('http://localhost:3000/accidents');\r\n    setAccidents(res.data.accidents);\r\n  };\r\n\r\nconst handleDeleteAccident = async (id) => {\r\n  try {\r\n    await axios.delete(`http://localhost:3000/accidents/${id}`);\r\n    setAccidents(accidents.filter((accident) => accident._id !== id));\r\n  } catch (error) {\r\n    console.error('Error deleting accident:', error.response);\r\n  }\r\n};\r\nfor (let i in accidents){\r\n  accidents[i]['edit']=(<NavLink to={`/accidents/edit/${accidents[i]['_id']}`}><Button style={{backgroundColor: 'lightblue', border: '0'}}>Edit</Button></NavLink>)\r\n  accidents[i]['delete']= <Button\r\n  style={{backgroundColor: 'darkred', border: '0'}}\r\n  onClick={() => handleDeleteAccident(accidents[i]['_id'])}\r\n> Delete </Button>\r\n  accidents[i]['date']= accidents[i]['date'].split('T')[0]\r\n  \r\n\r\n}\r\nconst data = {\r\n  columns: [\r\n    {\r\n      label: 'Accident Report No.',\r\n      field: 'accidentReportNumber',\r\n      sort: 'asc',\r\n      width: 100\r\n    },\r\n    {\r\n      label: 'Student ID',\r\n      field: 'studentID',\r\n      sort: 'asc',\r\n      width: 200\r\n    },\r\n    {\r\n      label: 'School',\r\n      field: 'school',\r\n      sort: 'asc',\r\n      width: 100\r\n    },\r\n    {\r\n      label: 'Employee',\r\n      field: 'employeeID',\r\n      sort: 'asc',\r\n      width: 200\r\n    },\r\n    {\r\n      label: 'Room',\r\n      field: 'room',\r\n      sort: 'asc',\r\n      width: 100\r\n    },\r\n    {\r\n      label: 'Date',\r\n      field: 'date',\r\n      sort: 'asc',\r\n      width: 150\r\n    },\r\n    {\r\n      label: 'Location',\r\n      field: 'location',\r\n      sort: 'asc',\r\n      width: 100\r\n    },\r\n    {\r\n      label: 'Cause',\r\n      field: 'cause',\r\n      sort: 'asc',\r\n      width: 100\r\n    },\r\n    {\r\n      label: 'Response',\r\n      field: 'response',\r\n      sort: 'asc',\r\n      width: 100\r\n    },\r\n    {\r\n      label: 'Action',\r\n      field: 'preventativeAction',\r\n      sort: 'asc',\r\n      width: 100\r\n    },\r\n    {\r\n      label: 'Witnesses',\r\n      field: 'witnesses',\r\n      sort: 'asc',\r\n      width: 100\r\n    },\r\n    {\r\n      label: 'Edit',\r\n      field: 'edit',\r\n    },\r\n    {\r\n      label: 'Delete',\r\n      field: 'delete',\r\n    }\r\n  ],\r\n  rows: \r\n    accidents\r\n  }\r\n  console.log(data)\r\n  return <div style={{marginLeft: 'auto'}}>\r\n    <GlobalStyle/>\r\n    <h2 style={{marginLeft: '50%'}}>Accidents</h2>\r\n    <div style={{width: '80%', marginLeft:'10%', backgroundColor: '#fff',\r\n                borderRadius: '10px', padding: '0 20px',boxShadow: '0px 0px 20px 0px rgba(0,0,0,0.2)', minWidth: '650px'}}>\r\n    <MDBDataTable\r\n      striped\r\n      small\r\n      data={data}\r\n      noBottomColumns={true} \r\n    />\r\n    <div style={{ paddingBottom:'20px'}}>\r\n<NavLink to=\"/accidents/create\" activeStyle>\r\n    <Button>Create Accident</Button>\r\n</NavLink>\r\n</div>\r\n</div>     \r\n</div>     \r\n}\r\nexport default Accidents;","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\CreateAccident.js",["142","143","144","145"],[],"import { useState, useEffect } from \"react\";\r\nimport styled, {createGlobalStyle, css} from 'styled-components';\r\nimport axios from \"axios\";\r\nimport { FaBorderStyle } from \"react-icons/fa\";\r\n\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height: 100%;\r\n\r\n  }\r\n\r\n  body{\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    background: linear-gradient(to top, #d1913c, #ffd194);\r\n    background-attachment: fixed;\r\n    height: 100%;\r\n    margin: 0;\r\n    color: 555;\r\n  }\r\n  input::-webkit-outer-spin-button,\r\n  input::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n`\r\nconst sharedStyles = css`\r\n  background-color: #eee;\r\n  height: 40px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ddd;\r\n  margin: 10px 0 20px 0;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n` \r\n\r\nconst StyledFormWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 2%;\r\n  height: 100%;\r\n  padding: 0 20px;\r\n  padding-bottom: 2%;\r\n\r\n`\r\nconst StyledForm = styled.form`\r\n  width: 100%;\r\n  max-width: 1000px;\r\n  padding: 40px; \r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  box-shadow: 0px 0px 20px 0px rgba(0,0,0,0.2);\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  display: block;\r\n  width: 100%;\r\n  ${sharedStyles}\r\n\r\n`\r\nconst StyledTextArea = styled.textarea`\r\n\r\n`\r\n\r\nconst StyledButton = styled.button`\r\n  display: block;\r\n  background-color: #D1913C;\r\n  color: #fff;\r\n  font-size: .9rem;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  height: 40px;\r\n  padding: 0 20px;\r\n  cursor: pointer;\r\n  boz-sizing: border-box;\r\n\r\n`\r\n\r\nconst StyledFieldset = styled.fieldset`\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin: 20px 0;\r\n  \r\n  legend{\r\n    padding: 0 10px;\r\n  }\r\n\r\n  label{\r\n    padding-right: 20px;\r\n  }\r\n\r\n  input{\r\n    margin-right: 10px;\r\n  }\r\n  `\r\nconst StyledError = styled.div`\r\n  color: red;\r\n  font-weight: 800;\r\n  margin: 0 0 40px 0;\r\n`\r\n\r\nfunction CreateAccidents() {\r\n  const [accidents, SetAccidents] = useState(null);\r\n  const [errors, setErrors] = useState({});\r\n  const [generatedReportNumber, setGeneratedReportNumber] = useState(\"\");\r\n  const [form, setForm] = useState({\r\n    accidentReportNumber: \"\",\r\n    studentID: \"\",\r\n    school: \"\",\r\n    employeeID: \"\",\r\n    room: \"\",\r\n    date: \"\",\r\n    location: \"\",\r\n    employeeIDInvolved: \"\",\r\n    studentIDInvolved: \"\",\r\n    cause: \"\",\r\n    response: \"\",\r\n    preventativeAction: \"\",\r\n    witnesses: \"\",\r\n    signed: \"\",\r\n  });\r\n\r\n  const validationRules = {\r\n    accidentReportNumber: { required: true, type: \"number\" },\r\n    studentID: { required: true, type: \"number\" },\r\n    school: { required: true, type: \"string\" },\r\n    employeeID: { required: true, type: \"number\" },\r\n    room: { required: true, type: \"string\" },\r\n    date: { required: true, type: \"string\" },\r\n    location: { required: true, type: \"string\" },\r\n    employeeIDInvolved: { required: false, type: \"number\" },\r\n    studentIDInvolved: { required: false, type: \"number\" },\r\n    cause: { required: true, type: \"string\" },\r\n    response: { required: true, type: \"string\" },\r\n    preventativeAction: { required: true, type: \"string\" },\r\n    witnesses: { required: false, type: \"string\" },\r\n    signed: { required: true, type: \"string\" },\r\n  };\r\n\r\n  const validateForm = (form) => {\r\n    const errors = {};\r\n\r\n    for (const key in validationRules) {\r\n      const rule = validationRules[key];\r\n      const value = form[key];\r\n\r\n      if (rule.required && (value === null || value === \"\")) {\r\n        errors[key] = `${key} is required`;\r\n      } else if (rule.type && typeof value !== rule.type) {\r\n        errors[key] = `${key} must be a ${rule.type}`;\r\n      }\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  const generateAccidentReportNumber = async () => {\r\n    let unique = false;\r\n    let accidentReportNumber;\r\n\r\n    while (!unique) {\r\n      accidentReportNumber = \"A\" + Math.floor(Math.random() * 1000000);\r\n      const res = await axios.get(`http://localhost:3000/accidents/${accidentReportNumber}`);\r\n      if (!res.data.accident) {\r\n        unique = true;\r\n      }\r\n    }\r\n    setGeneratedReportNumber(accidentReportNumber);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAccidents();\r\n    (async () => {\r\n      const accidentReportNumber = await generateAccidentReportNumber();\r\n      setForm({\r\n        ...form,\r\n        accidentReportNumber,\r\n      });\r\n    })();\r\n  }, []);\r\n\r\n  // Functions\r\n  const getAccidents = async () => {\r\n    // get students\r\n    const res = await axios.get(\"http://localhost:3000/accidents\");\r\n    // set state\r\n    SetAccidents(res.data.accidents);\r\n  };\r\n\r\n  function handleChange(e) {\r\n    setForm({ ...form, [e.target.name]: e.target.value });\r\n  }\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post(\"/api/accidents\", form);\r\n      if (response.status === 201) {\r\n        SetAccidents([...accidents, response.data]);\r\n        setErrors('');\r\n      } else {\r\n        setErrors('Error creating accident report. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      setErrors(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  \r\n  return( \r\n<>\r\n  <GlobalStyle />\r\n  <StyledFormWrapper>\r\n    <StyledForm onSubmit={handleSubmit}>\r\n      <h2>Edit Accident</h2>\r\n\r\n      <div style={{ display: 'grid', gridGap: '10px', gridTemplateColumns: '50% 50%' }}>\r\n        <div>\r\n        <label htmlFor=\"accidentReportNumber\">Accident Report Number:</label>\r\n            <StyledInput\r\n              onChange={handleChange}\r\n              value={generatedReportNumber}\r\n              type=\"number\"\r\n              name=\"accidentReportNumber\"\r\n              disabled\r\n            />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"studentID\">Student ID:</label>\r\n          <StyledInput\r\n            onChange={(event) => setForm({ ...form, studentID: event.target.value })}\r\n            value={form.studentID}\r\n            name=\"studentID\"\r\n          />\r\n          {errors.studentID && <StyledError>{errors.studentID}</StyledError>}\r\n        </div>\r\n      </div>\r\n\r\n      <label htmlFor=\"school\">School:</label>\r\n      <StyledInput\r\n        onChange={(event) => setForm({ ...form, school: event.target.value })}\r\n        value={form.school}\r\n        name=\"school\"\r\n      />\r\n      {errors.school && <StyledError>{errors.school}</StyledError>}\r\n\r\n      <div style={{ display: 'grid', gridGap: '10px', gridTemplateColumns: '50% 50%' }}>\r\n        <div>\r\n          <label htmlFor=\"employeeID\">Employee ID:</label>\r\n          <StyledInput\r\n            onChange={(event) => setForm({ ...form, employeeID: event.target.value })}\r\n            value={form.employeeID}\r\n            name=\"employeeID\"\r\n          />\r\n          {errors.employeeID && <StyledError>{errors.employeeID}</StyledError>}\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"room\">Room:</label>\r\n          <StyledInput\r\n            onChange={(event) => setForm({ ...form, room: event.target.value })}\r\n            value={form.room}\r\n            name=\"room\"\r\n          />\r\n          {errors.room && <StyledError>{errors.room}</StyledError>}\r\n        </div>\r\n      </div>\r\n\r\n      <label htmlFor=\"date\">Date:</label>\r\n      <StyledInput\r\n        onChange={(event) => setForm({ ...form, date: event.target.value })}\r\n        value={form.date}\r\n        type=\"date\"\r\n        name=\"date\"\r\n        style={{ width: '50%' }}\r\n      />\r\n      {errors.date && <StyledError>{errors.date}</StyledError>}\r\n\r\n      <label htmlFor=\"location\">Location:</label>\r\n      <StyledInput\r\n        onChange={(event) => setForm({ ...form, location: event.target.value })}\r\n        value={form.location}\r\n        name=\"location\"\r\n      />\r\n      {errors.location && <StyledError>{errors.location}</StyledError>}\r\n\r\n      <div style={{ display: 'grid', gridGap: '10px', gridTemplateColumns: '50% 50%' }}>\r\n        <div>\r\n          <label htmlFor=\"employeeIDInvolved\">Staff Involved:</label>\r\n          <StyledInput\r\n            onChange={(event) => setForm({ ...form, employeeIDInvolved: event.target.value })}\r\n            value={form.employeeIDInvolved}\r\n            name=\"employeeIDInvolved\"\r\n            type=\"number\"\r\n          />\r\n          {errors.employeeIDInvolved && <StyledError>{errors.employeeIDInvolved}</StyledError>}\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"supervisorID\">Supervisor ID:</label>\r\n          <StyledInput\r\n              onChange={(event) => setForm({ ...form, supervisorID: event.target.value })}\r\n              value={form.supervisorID}\r\n              name=\"supervisorID\"\r\n              type=\"number\"\r\n            />\r\n            {errors.supervisorID && <StyledError>{errors.supervisorID}</StyledError>}\r\n          </div>\r\n        </div>\r\n    \r\n        <label htmlFor=\"description\">Description of Accident:</label>\r\n        <StyledTextArea\r\n          onChange={(event) => setForm({ ...form, description: event.target.value })}\r\n          value={form.description}\r\n          name=\"description\"\r\n        />\r\n        {errors.description && <StyledError>{errors.description}</StyledError>}\r\n    \r\n        <label htmlFor=\"actionTaken\">Action Taken:</label>\r\n        <StyledTextArea\r\n          onChange={(event) => setForm({ ...form, actionTaken: event.target.value })}\r\n          value={form.actionTaken}\r\n          name=\"actionTaken\"\r\n        />\r\n        {errors.actionTaken && <StyledError>{errors.actionTaken}</StyledError>}\r\n    \r\n        <StyledButton type=\"submit\">Create</StyledButton>\r\n      </StyledForm>\r\n      {errors.nonFieldErrors && <StyledError>{errors.nonFieldErrors}</StyledError>}\r\n    </StyledFormWrapper>\r\n    </>\r\n  );\r\n   \r\n}\r\n\r\nexport default CreateAccidents;","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\incidents.js",["146","147"],[],"import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {NavLink} from \"../components/Navbar/NavbarElements\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button } from \"react-bootstrap\";\r\nimport styled, {createGlobalStyle, css} from 'styled-components';\r\nimport { MDBDataTable } from 'mdbreact';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height: 100%;\r\n\r\n  }\r\n\r\n  body{\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    background: linear-gradient(to top, #d1913c, #ffd194);\r\n    background-attachment: fixed;\r\n    height: 100%;\r\n    margin: 0;\r\n    color: 555;\r\n  }\r\n`\r\n\r\nfunction Incidents() {\r\n\r\n  const [incidents, setIncidents] = useState(null);\r\n\r\n  useEffect (() => {\r\n    getIncidents();\r\n  }, []);\r\n\r\n  const getIncidents = async () => {\r\n    const res = await axios.get('http://localhost:3000/incidents');\r\n    setIncidents(res.data.incidents);\r\n  };\r\n  const deleteIncident = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:3000/incidents/${id}`);\r\n      setIncidents(incidents.filter((incident) => incident._id !== id));\r\n    } catch (error) {\r\n      console.error(\"Error deleting incident:\", error);\r\n    }\r\n  };\r\n  for (let i in incidents){\r\n    incidents[i]['edit']=(<NavLink to={`/incidents/edit/${incidents[i]['_id']}`}><Button style={{backgroundColor: 'lightblue', border: '0'}}>Edit</Button></NavLink>)\r\n    incidents[i]['delete']= <Button\r\n    style={{backgroundColor: 'darkred', border: '0'}}\r\n    onClick={() => deleteIncident(incidents[i]['_id'])}\r\n  > Delete </Button>\r\n  incidents[i]['date']= incidents[i]['date'].split('T')[0]\r\n  incidents[i]['participant']= incidents[i]['firstNameParticipant']+' '+incidents[i]['lastNameParticipant']\r\n  incidents[i]['reporter']= incidents[i]['firstNameReport']+' '+incidents[i]['lastNameReport']\r\n  incidents[i]['manager']= incidents[i]['firstNameManager']+' '+incidents[i]['lastNameManager']  \r\n  \r\n  }\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: 'Incident Report No.',\r\n        field: 'incidentReportNumber',\r\n        sort: 'asc',\r\n        width: 100\r\n      },\r\n      {\r\n        label: 'Student ID',\r\n        field: 'studentID',\r\n        sort: 'asc',\r\n        width: 200\r\n      },\r\n      {\r\n        label: 'Agency',\r\n        field: 'agencyOrProgram',\r\n        sort: 'asc',\r\n        width: 100\r\n      },\r\n      {\r\n        label: 'Contact',\r\n        field: 'contactNumber',\r\n        sort: 'asc',\r\n        width: 200\r\n      },\r\n      {\r\n        label: 'Address',\r\n        field: 'address',\r\n        sort: 'asc',\r\n        width: 100\r\n      },\r\n      {\r\n        label: 'Type',\r\n        field: 'incidentType',\r\n        sort: 'asc',\r\n        width: 100\r\n      },\r\n      {\r\n        label: 'Date',\r\n        field: 'date',\r\n        sort: 'asc',\r\n        width: 150\r\n      },\r\n      {\r\n        label: 'Location',\r\n        field: 'location',\r\n        sort: 'asc',\r\n        width: 100\r\n      },\r\n      {\r\n        label: 'Employee',\r\n        field: 'employeeID',\r\n        sort: 'asc',\r\n        width: 100\r\n      },\r\n      {\r\n        label: 'Participant',\r\n        field: 'participant',\r\n        sort: 'asc',\r\n        width: 100\r\n      },\r\n      {\r\n        label: 'Reporter',\r\n        field: 'reporter',\r\n        sort: 'asc',\r\n        width: 100\r\n      },\r\n      {\r\n        label: 'Manager',\r\n        field: 'manager',\r\n        sort: 'asc',\r\n        width: 100\r\n      },\r\n      {\r\n        label: 'Edit',\r\n        field: 'edit',\r\n      },\r\n      {\r\n        label: 'Delete',\r\n        field: 'delete',\r\n      }\r\n    ],\r\n    rows: \r\n      incidents\r\n    }\r\n  \r\n  return <div style={{marginLeft: 'auto'}}>\r\n    <GlobalStyle/>\r\n    <h2 style={{marginLeft: '50%'}}>Incidents</h2>\r\n    <div style={{width: '80%', marginLeft:'10%', backgroundColor: '#fff',\r\n                borderRadius: '10px', padding: '0 20px',boxShadow: '0px 0px 20px 0px rgba(0,0,0,0.2)', minWidth: '650px'}}>\r\n    <MDBDataTable\r\n      striped\r\n      small\r\n      data={data}\r\n      noBottomColumns={true} \r\n    />\r\n\r\n<div style={{paddingBottom:'20px'}}>\r\n<NavLink to=\"/incidents/create\" activeStyle>\r\n    <Button>Create Incident</Button>\r\n</NavLink>\r\n</div>\r\n</div>  \r\n</div>   \r\n}\r\nexport default Incidents;\r\n","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\referrals.js",["148","149"],[],"import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {NavLink} from \"../components/Navbar/NavbarElements\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button } from \"react-bootstrap\";\r\nimport styled, {createGlobalStyle, css} from 'styled-components';\r\nimport { MDBDataTable } from 'mdbreact';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height: 100%;\r\n\r\n  }\r\n\r\n  body{\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    background: linear-gradient(to top, #d1913c, #ffd194);\r\n    background-attachment: fixed;\r\n    height: 100%;\r\n    margin: 0;\r\n    color: 555;\r\n  }\r\n`\r\n\r\nfunction Referrals() {\r\n  const [referrals, setReferrals] = useState(null);\r\n  \r\n  useEffect (() => {\r\n    getReferrals();\r\n  }, []);\r\n\r\n  const getReferrals = async () => {\r\n    const res = await axios.get('http://localhost:3000/referrals');\r\n    setReferrals(res.data.referrals);\r\n  };\r\n  const deleteReferral = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:3000/referrals/${id}`);\r\n      setReferrals(referrals.filter((referral) => referral._id !== id));\r\n    } catch (error) {\r\n      console.error(\"Error deleting referral:\", error);\r\n    }\r\n  };\r\n  \r\n  for (let i in referrals){\r\n    referrals[i]['edit']=(<NavLink to={`/referrals/edit/${referrals[i]['_id']}`}><Button style={{backgroundColor: 'lightblue', border: '0'}}>Edit</Button></NavLink>)\r\n    referrals[i]['delete']= <Button\r\n    style={{backgroundColor: 'darkred', border: '0'}}\r\n    onClick={() => deleteReferral(referrals[i]['_id'])}\r\n  > Delete </Button>\r\n    referrals[i]['date']= referrals[i]['date'].split('T')[0]\r\n    \r\n  \r\n  }\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: 'Referral No.',\r\n        field: 'referralNumber',\r\n        sort: 'asc',\r\n        width: 100\r\n      },\r\n      {\r\n        label: 'Student ID',\r\n        field: 'studentID',\r\n        sort: 'asc',\r\n        width: 200\r\n      },\r\n      {\r\n        label: 'Student',\r\n        field: 'studentName',\r\n        sort: 'asc',\r\n        width: 100\r\n      },\r\n      {\r\n        label: 'Date',\r\n        field: 'date',\r\n        sort: 'asc',\r\n        width: 200\r\n      },\r\n      {\r\n        label: 'Cause',\r\n        field: 'cause',\r\n        sort: 'asc',\r\n        width: 100\r\n      },\r\n      {\r\n        label: 'Action',\r\n        field: 'action',\r\n        sort: 'asc',\r\n        width: 150\r\n      },\r\n      {\r\n        label: 'Employee',\r\n        field: 'employeeID',\r\n        sort: 'asc',\r\n        width: 100\r\n      },\r\n      {\r\n        label: 'Parent Contact',\r\n        field: 'parentPhoneNumber',\r\n        sort: 'asc',\r\n        width: 100\r\n      },\r\n      {\r\n        label: 'Edit',\r\n        field: 'edit',\r\n      },\r\n      {\r\n        label: 'Delete',\r\n        field: 'delete',\r\n      }\r\n    ],\r\n    rows: \r\n      referrals\r\n    }\r\n\r\n  return <div style={{marginLeft: 'auto'}}>\r\n    <GlobalStyle/>\r\n    <h2 style={{marginLeft: '50%'}}>Referrals</h2>\r\n    <div style={{width: '80%', marginLeft:'10%', backgroundColor: '#fff',\r\n                borderRadius: '10px', padding: '0 20px',boxShadow: '0px 0px 20px 0px rgba(0,0,0,0.2)', minWidth: '650px'}}>\r\n    <MDBDataTable\r\n      striped\r\n      small\r\n      data={data}\r\n      noBottomColumns={true} \r\n    />\r\n\r\n\r\n<div style={{paddingBottom:'20px'}}>\r\n<NavLink to=\"/referrals/create\" activeStyle>\r\n    <Button>Create Referral</Button>\r\n</NavLink>\r\n</div>\r\n</div>\r\n</div>     \r\n}\r\nexport default Referrals;","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\CreateReferral.js",["150","151","152"],[],"import { useState, useEffect } from \"react\";\r\nimport styled, {createGlobalStyle, css} from 'styled-components';\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height: 100%;\r\n\r\n  }\r\n\r\n  body{\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    background: linear-gradient(to top, #d1913c, #ffd194);\r\n    background-attachment: fixed;\r\n    height: 100%;\r\n    margin: 0;\r\n    color: 555;\r\n  }\r\n  input::-webkit-outer-spin-button,\r\n  input::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n`\r\nconst sharedStyles = css`\r\n  background-color: #eee;\r\n  height: 40px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ddd;\r\n  margin: 10px 0 20px 0;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n` \r\n\r\nconst StyledFormWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 2%;\r\n  height: 100%;\r\n  padding: 0 20px;\r\n  padding-bottom: 2%;\r\n\r\n`\r\nconst StyledForm = styled.form`\r\n  width: 100%;\r\n  max-width: 1000px;\r\n  padding: 40px; \r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  box-shadow: 0px 0px 20px 0px rgba(0,0,0,0.2);\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  display: block;\r\n  width: 100%;\r\n  ${sharedStyles}\r\n\r\n`\r\nconst StyledTextArea = styled.textarea`\r\n\r\n`\r\n\r\nconst StyledButton = styled.button`\r\n  display: block;\r\n  background-color: #D1913C;\r\n  color: #fff;\r\n  font-size: .9rem;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  height: 40px;\r\n  padding: 0 20px;\r\n  cursor: pointer;\r\n  boz-sizing: border-box;\r\n\r\n`\r\n\r\nconst StyledFieldset = styled.fieldset`\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin: 20px 0;\r\n  \r\n  legend{\r\n    padding: 0 10px;\r\n  }\r\n\r\n  label{\r\n    padding-right: 20px;\r\n  }\r\n\r\n  input{\r\n    margin-right: 10px;\r\n  }\r\n  `\r\nconst StyledError = styled.div`\r\n  color: red;\r\n  font-weight: 800;\r\n  margin: 0 0 40px 0;\r\n`\r\n\r\nfunction CreateReferrals() {\r\n  // State\r\n  const [referrals, SetReferrals] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const [createForm, SetCreateForm] = useState({\r\n    referralNumber: '',\r\n    studentID: '',\r\n    studentName: '',\r\n    date: '',\r\n    cause: '', \r\n    action: '',\r\n    employeeID: '', \r\n    parentPhoneNumber: ''\r\n  });\r\n\r\n  //User Effect\r\n  useEffect (() => {\r\n    getReferrals();\r\n  }, []);\r\n\r\n  //Functions \r\n  const getReferrals = async () => {\r\n    //get students\r\n    const res = await axios.get('http://localhost:3000/referrals');\r\n    //set state\r\n    SetReferrals(res.data.referrals);\r\n  };\r\n\r\n  const UpdateCreateFormField = (e) => {\r\n    const {name, value} = e.target;\r\n\r\n    SetCreateForm({\r\n      ...createForm,\r\n      [name]: value,\r\n\r\n    })\r\n\r\n  };\r\n\r\n  const CreateReferral = async (e) => {\r\n    e.preventDefault();\r\n\r\n    //Check errors here\r\n\r\n\r\n    // Create the student\r\n    const res = await axios.post(\"http://localhost:3000/referrals\", createForm);\r\n    //Update state\r\n    console.log(res);\r\n    SetReferrals([...referrals, res.data.referral]);\r\n\r\n    //Clear form state\r\n    SetCreateForm({\r\n        referralNumber: '',\r\n        studentID: '',\r\n        studentName: '',\r\n        date: '',\r\n        cause: '', \r\n        action: '',\r\n        employeeID: '', \r\n        parentPhoneNumber: ''\r\n    })\r\n    \r\n  }\r\n  \r\n  return( \r\n  <>\r\n  <GlobalStyle/>\r\n    <StyledFormWrapper>\r\n      <StyledForm onSubmit={CreateReferral}>\r\n        <h2 style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>Create Referral</h2>\r\n          <label htmlFor=\"referralNumber\">Referral Number: </label>\r\n          <StyledInput\r\n            onChange={UpdateCreateFormField}\r\n            value={createForm.referralNumber}\r\n            name=\"referralNumber\"\r\n            type=\"Number\"\r\n          />\r\n          <label htmlFor=\"studentID\">Student ID: </label>\r\n          <StyledInput\r\n            onChange={UpdateCreateFormField}\r\n            value={createForm.studentID}\r\n            name=\"studentID\"\r\n            type=\"number\"\r\n          />\r\n          <label htmlFor=\"studentName\">Student Name: </label>\r\n          <StyledInput\r\n          onChange={UpdateCreateFormField}\r\n          value={createForm.studentName}\r\n          name=\"studentName\"\r\n          />\r\n          <label htmlFor=\"date\">Date: </label>\r\n          <StyledInput\r\n            onChange={UpdateCreateFormField}\r\n            value={createForm.date}\r\n            type=\"date\"\r\n            name=\"date\"\r\n          />\r\n          <label htmlFor=\"cause\">Cause: </label>\r\n          <StyledInput\r\n            onChange={UpdateCreateFormField}\r\n            value={createForm.cause}\r\n            name=\"cause\"\r\n          />\r\n          <label htmlFor=\"action\">Action: </label>\r\n          <StyledInput\r\n            onChange={UpdateCreateFormField}\r\n            value={createForm.action}\r\n            name=\"action\"\r\n          />\r\n          <div style={{display: 'grid', gridGap: '10px', gridTemplateColumns: '1fr 1fr' }}>\r\n              <div>\r\n                <label htmlFor=\"employeeID\">Employee ID: </label>\r\n                <StyledInput\r\n                  onChange={UpdateCreateFormField}\r\n                  value={createForm.employeeID}\r\n                  name=\"employeeID\"\r\n                  type=\"Number\"\r\n                />\r\n              </div>\r\n              <div>\r\n              <label htmlFor=\"parentPhoneNumber\">Parent Contact Number: </label>\r\n                <StyledInput\r\n                onChange={UpdateCreateFormField}\r\n                value={createForm.parentPhoneNumber}\r\n                name=\"parentPhoneNumber\"\r\n                type=\"Number\"\r\n                />\r\n              </div>\r\n            </div>\r\n          \r\n          {error && (\r\n            <StyledError>\r\n            <p>{error}</p>\r\n            </StyledError>\r\n            )}\r\n          \r\n          <StyledButton type=\"submit\">Create Referral</StyledButton>\r\n  </StyledForm>\r\n  </StyledFormWrapper>\r\n  </>\r\n  );\r\n   \r\n}\r\n\r\nexport default CreateReferrals;","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\profile.js",[],[],"C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\Admin.js",["153","154","155","156"],[],"// Admin.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport '../mySite.css'\r\n\r\nconst Admin = () => {\r\n  // Staff state variables\r\nconst [editStaffPassword, setEditStaffPassword] = useState('');\r\nconst [newStaffEmployeeID, setNewStaffEmployeeID] = useState('');\r\nconst [newStaffPassword, setNewStaffPassword] = useState('');\r\nconst [newStaffUsername, setNewStaffUsername] = useState('');\r\nconst [newStaffEmail, setNewStaffEmail] = useState('');\r\nconst [newStaffIsAdmin, setNewStaffIsAdmin] = useState(false);\r\nconst [newStaffIsActive, setNewStaffIsActive] = useState(true);\r\nconst [newStaffUserAvatar, setNewStaffUserAvatar] = useState('');\r\nconst [newStaffName, setNewStaffName] = useState('');\r\nconst [staffList, setStaffList] = useState([]);\r\nconst [studentList, setStudentList] = useState([]);\r\nconst [newStudentName, setNewStudentName] = useState('');\r\nconst [editStaffId, setEditStaffId] = useState('');\r\nconst [editStudentId, setEditStudentId] = useState('');\r\nconst [editStaffName, setEditStaffName] = useState('');\r\nconst [editStudentName, setEditStudentName] = useState('');\r\nconst [newPassword, setNewPassword] = useState('');\r\nconst [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  // Fetch data from API\r\n  useEffect(() => {\r\n    fetchStaff();\r\n    fetchStudents();\r\n  }, []);\r\n\r\n  const fetchStaff = async () => {\r\n    const staffResponse = await axios.get('http://localhost:3000/admin/staff');\r\n    setStaffList(staffResponse.data.staff);\r\n  };\r\n\r\n  const fetchStudents = async () => {\r\n    const studentResponse = await axios.get('http://localhost:3000/admin/students');\r\n    setStudentList(studentResponse.data.students);\r\n  };\r\n\r\n\r\n  const handleChangePasswordSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (editStaffId) {\r\n      try {\r\n        const response = await axios.put(`http://localhost:3000/admin/staff/${editStaffId}/password`, { password: editStaffPassword });\r\n        \r\n        if (response.status === 200) {\r\n          setEditStaffPassword('');\r\n          setErrorMessage('');\r\n        } else if (response.status === 400) {\r\n          setErrorMessage('Invalid employee ID');\r\n        } else {\r\n          setErrorMessage('Invalid employee ID');\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        setErrorMessage('Invalid employee ID');\r\n      }\r\n    } else {\r\n      setErrorMessage('Please enter a valid Staff ID');\r\n    }\r\n  };\r\n  const handleNewStaffSubmit = async (event) => {\r\n    event.preventDefault();\r\n  \r\n    // Validation checks\r\n    if (!newStaffEmployeeID || !newStaffPassword || !newStaffName || !newStaffUsername || !newStaffEmail) {\r\n      setErrorMessage('All fields are required except User Avatar.');\r\n      return;\r\n    }\r\n  \r\n    if (isNaN(newStaffEmployeeID)) {\r\n      setErrorMessage('Employee ID must be a number.');\r\n      return;\r\n    }\r\n  \r\n    if (newStaffPassword.length < 6) {\r\n      setErrorMessage('Password must be at least 6 characters long.');\r\n      return;\r\n    }\r\n  \r\n    if (!/^[\\w\\s]+$/.test(newStaffName)) {\r\n      setErrorMessage('Name must only contain letters, numbers, and spaces.');\r\n      return;\r\n    }\r\n  \r\n    if (!/^[a-zA-Z0-9_]+$/.test(newStaffUsername)) {\r\n      setErrorMessage('Username must only contain letters, numbers, and underscores.');\r\n      return;\r\n    }\r\n  \r\n    if (!/\\S+@\\S+\\.\\S+/.test(newStaffEmail)) {\r\n      setErrorMessage('Invalid email address.');\r\n      return;\r\n    }\r\n  \r\n    // Check if Employee ID already exists\r\n    try {\r\n      const response = await axios.get(`http://localhost:3000/admin/staff/exists/${newStaffEmployeeID}`);\r\n      if(response.status === 200 || response.status === 304){\r\n        console.error('Error checking Employee ID existence:');\r\n        setErrorMessage('Employee ID already exists.');\r\n      }\r\n      else{\r\n        console.error('Error checking Employee ID existence:');\r\n        setErrorMessage('An error occurred while checking employee ID existence.');\r\n      }\r\n    } catch (error) {\r\n      if (error.response && error.response.status === 404) {\r\n        try {\r\n          await axios.post('http://localhost:3000/admin/staff', {\r\n            employeeID: newStaffEmployeeID,\r\n            password: newStaffPassword,\r\n            name: newStaffName,\r\n            username: newStaffUsername,\r\n            email: newStaffEmail,\r\n            isAdmin: newStaffIsAdmin ? 1 : 0,\r\n            isActive: newStaffIsActive ? 1 : 0,\r\n            userAvatar: newStaffUserAvatar\r\n          });\r\n      \r\n          // Clear the form\r\n          setNewStaffEmployeeID('');\r\n          setNewStaffPassword('');\r\n          setNewStaffName('');\r\n          setNewStaffUsername('');\r\n          setNewStaffEmail('');\r\n          setNewStaffIsAdmin(false);\r\n          setNewStaffIsActive(true);\r\n          setNewStaffUserAvatar('');\r\n      \r\n          // Refresh the staff list\r\n          fetchStaff();\r\n        } catch (error) {\r\n          console.error('Error creating new staff member:', error);\r\n          setErrorMessage('An error occurred while creating the new staff member.');\r\n        }\r\n      return;\r\n    }\r\n    \r\n  };\r\n}\r\n  const handleNewStudentSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await axios.post('http://localhost:3000/admin/students', { name: newStudentName });\r\n    setNewStudentName('');\r\n    fetchStudents();\r\n  };\r\n\r\n  const handleEditStaffSubmit = async (event) => {\r\n    try {\r\n      event.preventDefault();\r\n      const response = await axios.put(`http://localhost:3000/admin/staff/${editStaffId}`, { name: editStaffName });\r\n      \r\n      if (response.status === 200) {\r\n        setEditStaffId(null);\r\n        setEditStaffName('');\r\n        setErrorMessage('');\r\n        fetchStaff();\r\n      } else if (response.status === 400) {\r\n        setErrorMessage('Invalid employee ID');\r\n      } else {\r\n        setErrorMessage('Invalid employee ID');\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      setErrorMessage('Invalid employee ID');\r\n    }\r\n  };\r\n\r\n  const handleEditStudentSubmit = async (event) => {\r\n    try{\r\n    event.preventDefault();\r\n    await axios.put(`http://localhost:3000/admin/students/${editStudentId}`, { name: editStudentName });\r\n    setEditStudentId('');\r\n    setEditStudentName('');\r\n    fetchStudents();\r\n  }catch(error){\r\n    console.log(error);\r\n  }\r\n  };\r\n  const handleUnarchiveStaff = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:3000/admin/staff/${id}`);\r\n      fetchStaff(); // Refresh staff list\r\n    } catch (error) {\r\n      console.error('Error unarchiving staff:', error);\r\n    }\r\n  };\r\n  const handleArchiveStaff = async (staffId) => {\r\n    await axios.delete(`http://localhost:3000/admin/staff/${staffId}`);\r\n    fetchStaff();\r\n  };\r\n\r\n  const handleUnarchiveStudent = async (id) => {\r\n    try {\r\n      await axios.delete(`http://localhost:3000/admin/students/${id}`);\r\n      fetchStudents(); // Refresh student list\r\n    } catch (error) {\r\n      console.error('Error unarchiving student:', error);\r\n    }\r\n  };\r\n\r\n  const handleArchiveStudent = async (studentId) => {\r\n    await axios.delete(`http://localhost:3000/admin/students/${studentId}`);\r\n    fetchStudents();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"admin-dashboard\">\r\n  <h1>Admin Dashboard</h1>\r\n  <div className=\"staff-section\">\r\n    <h2>Staff</h2>\r\n    <div className=\"form-container edit-staff\">\r\n      <form onSubmit={handleEditStaffSubmit}>\r\n        <label htmlFor=\"editStaffId\">ID: </label>\r\n        <input\r\n          id=\"editStaffId\"\r\n          type=\"text\"\r\n          value={editStaffId}\r\n          onChange={(event) => setEditStaffId(event.target.value)}\r\n        />\r\n        <label htmlFor=\"editStaffName\">Edit Staff Name: </label>\r\n        <input\r\n          id=\"editStaffName\"\r\n          type=\"text\"\r\n          value={editStaffName}\r\n          onChange={(event) => setEditStaffName(event.target.value)}\r\n        />\r\n        <button type=\"submit\">Edit</button>\r\n        <div className=\"error-container\">\r\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n    </div>\r\n      </form>\r\n    </div>\r\n    <div className=\"form-container edit-student-password\">\r\n  <form onSubmit={handleChangePasswordSubmit}>\r\n  <label htmlFor=\"editStaffId\">ID: </label>\r\n        <input\r\n          id=\"editStaffId\"\r\n          type=\"text\"\r\n          value={editStaffId}\r\n          onChange={(event) => setEditStaffId(event.target.value)}\r\n        />\r\n    <label htmlFor=\"editStaffPassword\">New Password: </label>\r\n    <input\r\n      id=\"editStaffPassword\"\r\n      type=\"text\"\r\n      value={editStaffPassword}\r\n      onChange={(event) => setEditStaffPassword(event.target.value)}\r\n    />\r\n    <button type=\"submit\">Edit</button>\r\n    {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n  </form>\r\n</div>\r\n    <div className=\"form-container archive-staff\">\r\n      {staffList.map((staff) => (\r\n        <button key={staff._id} onClick={() => handleArchiveStaff(staff._id)}>\r\n          Archive {staff.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n    <div className=\"form-container unarchive-staff\">\r\n      {staffList\r\n        .filter((staff) => !staff.isActive)\r\n        .map((staff) => (\r\n          <button key={staff._id} onClick={() => handleUnarchiveStaff(staff._id)}>\r\n            Unarchive {staff.name}\r\n          </button>\r\n        ))}\r\n    </div>\r\n\r\n    <ul className=\"staff-list\">\r\n      {staffList.map((staff) => (\r\n        <li key={staff._id}>{staff.name}</li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n</div>\r\n  <div className=\"student-section\">\r\n    <h2>Students</h2>\r\n    <div className=\"form-container archive-student\">\r\n      {studentList.map((student) => (\r\n        <button key={student._id} onClick={() => handleArchiveStudent(student._id)}>\r\n          Archive {student.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n    <div className=\"form-container unarchive-student\">\r\n      {studentList\r\n        .filter((student) => !student.isActive)\r\n        .map((student) => (\r\n          <button key={student._id} onClick={() => handleUnarchiveStudent(student._id)}>\r\n            Unarchive {student.name}\r\n          </button>\r\n        ))}\r\n    </div>\r\n\r\n    <ul>\r\n      {studentList.map((student) => (\r\n        <li key={student._id}>{student.name}</li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n    <div className=\"form-container create-staff\">\r\n    {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n<form onSubmit={handleNewStaffSubmit}>\r\n  {/* Rest of the form */}\r\n    {/* EmployeeID */}\r\n    <label htmlFor=\"newStaffEmployeeID\">Employee ID: </label>\r\n    <input\r\n      id=\"newStaffEmployeeID\"\r\n      type=\"number\"\r\n      value={newStaffEmployeeID}\r\n      onChange={(event) => setNewStaffEmployeeID(event.target.value)}\r\n      required\r\n    />\r\n    {/* Password */}\r\n    <label htmlFor=\"newStaffPassword\">Password: </label>\r\n    <input\r\n      id=\"newStaffPassword\"\r\n      type=\"password\"\r\n      value={newStaffPassword}\r\n      onChange={(event) => setNewStaffPassword(event.target.value)}\r\n      required\r\n    />\r\n    {/* Name */}\r\n    <label htmlFor=\"newStaffName\">Name: </label>\r\n    <input\r\n      id=\"newStaffName\"\r\n      type=\"text\"\r\n      value={newStaffName}\r\n      onChange={(event) => setNewStaffName(event.target.value)}\r\n      required\r\n    />\r\n    {/* Username */}\r\n    <label htmlFor=\"newStaffUsername\">Username: </label>\r\n    <input\r\n      id=\"newStaffUsername\"\r\n      type=\"text\"\r\n      value={newStaffUsername}\r\n      onChange={(event) => setNewStaffUsername(event.target.value)}\r\n      required\r\n    />\r\n    {/* Email */}\r\n    <label htmlFor=\"newStaffEmail\">Email: </label>\r\n    <input\r\n      id=\"newStaffEmail\"\r\n      type=\"email\"\r\n      value={newStaffEmail}\r\n      onChange={(event) => setNewStaffEmail(event.target.value)}\r\n      required\r\n    />\r\n    {/* isAdmin */}\r\n    <label htmlFor=\"newStaffIsAdmin\">Is Admin: </label>\r\n    <input\r\n      id=\"newStaffIsAdmin\"\r\n      type=\"checkbox\"\r\n      checked={newStaffIsAdmin}\r\n      onChange={(event) => setNewStaffIsAdmin(event.target.checked)}\r\n    />\r\n    {/* UserAvatar */}\r\n    <label htmlFor=\"newStaffUserAvatar\">User Avatar: </label>\r\n    <input\r\n      id=\"newStaffUserAvatar\"\r\n      type=\"text\"\r\n      value={newStaffUserAvatar}\r\n      onChange={(event) => setNewStaffUserAvatar(event.target.value)}\r\n    />\r\n    <button type=\"submit\">Add Staff</button>\r\n  </form>\r\n</div>\r\n</div>\r\n);\r\n};\r\n\r\nexport default Admin;","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\editIncident.js",["157","158"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport styled, {createGlobalStyle, css} from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height: 100%;\r\n\r\n  }\r\n\r\n  body{\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    background: linear-gradient(to top, #d1913c, #ffd194);\r\n    background-attachment: fixed;\r\n    height: 100%;\r\n    margin: 0;\r\n    color: 555;\r\n  }\r\n  input::-webkit-outer-spin-button,\r\n  input::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n`\r\nconst sharedStyles = css`\r\n  background-color: #eee;\r\n  height: 40px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ddd;\r\n  margin: 10px 0 20px 0;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n` \r\n\r\nconst StyledFormWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 2%;\r\n  height: 100%;\r\n  padding: 0 20px;\r\n  padding-bottom: 2%;\r\n\r\n`\r\nconst StyledForm = styled.form`\r\n  width: 100%;\r\n  max-width: 1000px;\r\n  padding: 40px; \r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  box-shadow: 0px 0px 20px 0px rgba(0,0,0,0.2);\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  display: block;\r\n  width: 100%;\r\n  ${sharedStyles}\r\n\r\n`\r\nconst StyledTextArea = styled.textarea`\r\n  background-color: #eee;\r\n  width: 100%;\r\n  min-height: 100px;\r\n  resize: none;\r\n  ${sharedStyles}\r\n`\r\n\r\nconst StyledButton = styled.button`\r\n  display: block;\r\n  background-color: #D1913C;\r\n  color: #fff;\r\n  font-size: .9rem;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  height: 40px;\r\n  padding: 0 20px;\r\n  cursor: pointer;\r\n  boz-sizing: border-box;\r\n\r\n`\r\n\r\nconst StyledFieldset = styled.fieldset`\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin: 20px 0;\r\n  \r\n  legend{\r\n    padding: 0 10px;\r\n  }\r\n\r\n  label{\r\n    padding-right: 20px;\r\n  }\r\n\r\n  input{\r\n    margin-right: 10px;\r\n  }\r\n  `\r\nconst StyledError = styled.div`\r\n  color: red;\r\n  font-weight: 800;\r\n  margin: 0 0 40px 0;\r\n`\r\n\r\n\r\n\r\n\r\nconst EditIncident = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [errors, setErrors] = useState({});\r\n  const [form, setForm] = useState({\r\n    incidentReportNumber: 0,\r\n    studentID: 0,\r\n    agencyOrProgram: '',\r\n    contactNumber: 0,\r\n    address: '',\r\n    incidentType: '',\r\n    incidentTypeOther: '',\r\n    location: '',\r\n    date: '',\r\n    employeeID: 0,\r\n    firstNameParticipant: '',\r\n    lastNameParticipant: '',\r\n    firstNameReport: '',\r\n    lastNameReport: '',\r\n    contactReportNumber: 0,\r\n    contactReportEmail: '',\r\n    firstNameManager: '',\r\n    lastNameManager: '',\r\n    phoneNumberManager: 0,\r\n    emailAddressManager: '',\r\n    signed: 0,\r\n  });\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return date.toISOString().split('T')[0];\r\n  };\r\n\r\n  const validateForm = (form) => {\r\n    const errors = {};\r\n\r\n    for (const key in validationRules) {\r\n      const rule = validationRules[key];\r\n      const value = form[key];\r\n\r\n      if (rule.required && (value === null || value === '')) {\r\n        errors[key] = `${key} is required`;\r\n      } else if (rule.type && typeof value !== rule.type) {\r\n        errors[key] = `${key} must be a ${rule.type}`;\r\n      } else if (rule.min !== undefined && value < rule.min) {\r\n        errors[key] = `${key} must be at least ${rule.min}`;\r\n      } else if (rule.max !== undefined && value > rule.max) {\r\n        errors[key] = `${key} must be at most ${rule.max}`;\r\n      }\r\n    }\r\n\r\n    return errors;\r\n  };\r\n  const validationRules = {\r\n    incidentReportNumber: { required: true, type: 'number' },\r\n    studentID: { required: true, type: 'number' },\r\n    agencyOrProgram: { required: true, type: 'string' },\r\n    contactNumber: { required: true, type: 'number' },\r\n    address: { required: true, type: 'string' },\r\n    incidentType: { required: true, type: 'string' },\r\n    incidentTypeOther: { required: false, type: 'string' },\r\n    location: { required: true, type: 'string' },\r\n    date: { required: true, type: 'string' },\r\n    employeeID: { required: true, type: 'number' },\r\n    firstNameParticipant: { required: true, type: 'string' },\r\n    lastNameParticipant: { required: true, type: 'string' },\r\n    firstNameReport: { required: true, type: 'string' },\r\n    lastNameReport: { required: true, type: 'string' },\r\n    contactReportNumber: { required: true, type: 'number' },\r\n    contactReportEmail: { required: true, type: 'string' },\r\n    firstNameManager: { required: true, type: 'string' },\r\n    lastNameManager: { required: true, type: 'string' },\r\n    phoneNumberManager: { required: true, type: 'number' },\r\n    emailAddressManager: { required: true, type: 'string' },\r\n    signed: { required: true, type: 'number', min: 0, max: 1 },\r\n  };\r\n  useEffect(() => {\r\n    const getIncident = async () => {\r\n      try {\r\n        const res = await axios.get(`http://localhost:3000/incidents/${id}`);\r\n        const incidentData = res.data.incident;\r\n        incidentData.date = formatDate(incidentData.date);\r\n        setForm(incidentData);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch incident data:\", error);\r\n      }\r\n    };\r\n    getIncident();\r\n  }, [id]);\r\n  const removeCircularReferences = (obj) => {\r\n    const seen = new WeakSet();\r\n    return JSON.parse(JSON.stringify(obj, (key, value) => {\r\n      if (typeof value === 'object' && value !== null) {\r\n        if (seen.has(value)) {\r\n          return;\r\n        }\r\n        seen.add(value);\r\n      }\r\n      return value;\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const errors = validateForm(form);\r\n    const hasErrors = Object.keys(errors).length > 0;\r\n\r\n    if (hasErrors) {\r\n      console.error(\"Form validation errors:\", errors);\r\n      setErrors(errors);\r\n    } else {\r\n      const formWithoutCircularReferences = removeCircularReferences(form);\r\n      await axios.put(`http://localhost:3000/incidents/${id}`, formWithoutCircularReferences);\r\n      navigate('/incidents');\r\n    }\r\n  };\r\n  \r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    const convertedValue = validationRules[name].type === 'number' && !isNaN(parseFloat(value)) ? parseFloat(value) : value;\r\n    setForm((prevForm) => ({ ...prevForm, [name]: convertedValue }));\r\n  };\r\n  return (\r\n    <>\r\n    <GlobalStyle/>\r\n    <StyledFormWrapper>\r\n      \r\n      <StyledForm onSubmit={handleSubmit}>\r\n      <h1>Edit Incident</h1>\r\n        <label htmlFor=\"incidentReportNumber\">Incident Report Number</label>\r\n        <StyledInput\r\n          type=\"number\"\r\n          id=\"incidentReportNumber\"\r\n          name=\"incidentReportNumber\"\r\n          value={form.incidentReportNumber}\r\n          onChange={handleChange}\r\n          disabled\r\n        />\r\n        {errors.incidentReportNumber && (\r\n          <p className=\"error\">{errors.incidentReportNumber}</p>\r\n        )}\r\n\r\n        <label htmlFor=\"studentID\">Student ID</label>\r\n        <StyledInput\r\n          type=\"number\"\r\n          id=\"studentID\"\r\n          name=\"studentID\"\r\n          value={form.studentID}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.studentID && <p className=\"error\">{errors.studentID}</p>}\r\n\r\n        <label htmlFor=\"agencyOrProgram\">Agency or Program</label>\r\n        <StyledInput\r\n          type=\"text\"\r\n          id=\"agencyOrProgram\"\r\n          name=\"agencyOrProgram\"\r\n          value={form.agencyOrProgram}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.agencyOrProgram && (\r\n          <p className=\"error\">{errors.agencyOrProgram}</p>\r\n        )}\r\n\r\n        <label htmlFor=\"contactNumber\">Contact Number</label>\r\n        <StyledInput\r\n          type=\"number\"\r\n          id=\"contactNumber\"\r\n          name=\"contactNumber\"\r\n          value={form.contactNumber}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.contactNumber && (\r\n          <p className=\"error\">{errors.contactNumber}</p>\r\n        )}\r\n\r\n        <label htmlFor=\"address\">Address</label>\r\n        <StyledInput\r\n          type=\"text\"\r\n          id=\"address\"\r\n          name=\"address\"\r\n          value={form.address}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.address && <p className=\"error\">{errors.address}</p>}\r\n\r\n\r\n\r\n        <StyledFieldset\r\n        id=\"incidentType\"\r\n        name=\"incidentType\"\r\n        value={form.incidentType}\r\n        onChange={handleChange}\r\n      >\r\n        <legend>Incident Type</legend>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"Media Coverage\"\r\n            name=\"incidentType\"\r\n            checked={form.incidentType === \"Media Coverage\"}\r\n            onChange={handleChange}\r\n          />\r\n          Media Coverage\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"Program Awards\"\r\n            name=\"incidentType\"\r\n            checked={form.incidentType === \"Program Awards\"}\r\n            onChange={handleChange}\r\n          />\r\n          Program Awards\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"Injury to Participant\"\r\n            name=\"incidentType\"\r\n            checked={form.incidentType === \"Injury to Participant\"}\r\n            onChange={handleChange}\r\n          />\r\n          Injury to Participant\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"Illness\"\r\n            name=\"incidentType\"\r\n            checked={form.incidentType === \"Illness\"}\r\n            onChange={handleChange}\r\n          />\r\n          Illness\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"Missing Participants\"\r\n            name=\"incidentType\"\r\n            checked={form.incidentType === \"Missing Participants\"}\r\n            onChange={handleChange}\r\n          />\r\n          Missing Participants\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"Notable Participant Achievements\"\r\n            name=\"incidentType\"\r\n            checked={form.incidentType === \"Notable Participant Achievements\"}\r\n            onChange={handleChange}\r\n          />\r\n          Notable Participant Achievements\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"Auto Accident\"\r\n            name=\"incidentType\"\r\n            checked={form.incidentType === \"Auto Accident\"}\r\n            onChange={handleChange}\r\n          />\r\n          Auto Accident\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"Injury to Employee\"\r\n            name=\"incidentType\"\r\n            checked={form.incidentType === \"Injury to Employee\"}\r\n            onChange={handleChange}\r\n          />\r\n          Injury to Employee\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"Behavior Requiring Disciplinary Action\"\r\n            name=\"incidentType\"\r\n            checked={form.incidentType === \"Behavior Requiring Disciplinary Action\"}\r\n            onChange={handleChange}\r\n          />\r\n          Behavior Requiring Disciplinary Action\r\n        </label>\r\n      </StyledFieldset>\r\n      {errors.incidentType && (\r\n        <p className=\"error\">{errors.incidentType}</p>\r\n      )}\r\n\r\n        <label htmlFor=\"incidentTypeOther\">Incident Type (Other)</label>\r\n        <StyledInput\r\n          type=\"text\"\r\n          id=\"incidentTypeOther\"\r\n          name=\"incidentTypeOther\"\r\n          value={form.incidentTypeOther}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.incidentTypeOther && (\r\n          <p className=\"error\">{errors.incidentTypeOther}</p>\r\n        )}\r\n\r\n        <label htmlFor=\"location\">Location</label>\r\n        <StyledInput\r\n          type=\"text\"\r\n          id=\"location\"\r\n          name=\"location\"\r\n          value={form.location}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.location && <p className=\"error\">{errors.location}</p>}\r\n\r\n        <label htmlFor=\"date\">Date</label>\r\n        <StyledInput\r\n          type=\"date\"\r\n          id=\"date\"\r\n          name=\"date\"\r\n          value={form.date}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.date && <p className=\"error\">{errors.date}</p>}\r\n        <label htmlFor=\"employeeID\">Employee ID</label>\r\n        <StyledInput\r\n          type=\"number\"\r\n          id=\"employeeID\"\r\n          name=\"employeeID\"\r\n          value={form.employeeID}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.employeeID && <p className=\"error\">{errors.employeeID}</p>}\r\n\r\n        <label htmlFor=\"firstNameParticipant\">First Name (Participant)</label>\r\n        <StyledInput\r\n          type=\"text\"\r\n          id=\"firstNameParticipant\"\r\n          name=\"firstNameParticipant\"\r\n          value={form.firstNameParticipant}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.firstNameParticipant && (\r\n          <p className=\"error\">{errors.firstNameParticipant}</p>\r\n        )}\r\n\r\n        <label htmlFor=\"lastNameParticipant\">Last Name (Participant)</label>\r\n        <StyledInput\r\n          type=\"text\"\r\n          id=\"lastNameParticipant\"\r\n          name=\"lastNameParticipant\"\r\n          value={form.lastNameParticipant}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.lastNameParticipant && (\r\n          <p className=\"error\">{errors.lastNameParticipant}</p>\r\n        )}\r\n\r\n        <label htmlFor=\"firstNameReport\">First Name (Report)</label>\r\n        <StyledInput\r\n          type=\"text\"\r\n          id=\"firstNameReport\"\r\n          name=\"firstNameReport\"\r\n          value={form.firstNameReport}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.firstNameReport && (\r\n          <p className=\"error\">{errors.firstNameReport}</p>\r\n        )}\r\n\r\n        <label htmlFor=\"lastNameReport\">Last Name (Report)</label>\r\n        <StyledInput\r\n          type=\"text\"\r\n          id=\"lastNameReport\"\r\n          name=\"lastNameReport\"\r\n          value={form.lastNameReport}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.lastNameReport && (\r\n          <p className=\"error\">{errors.lastNameReport}</p>\r\n        )}\r\n\r\n        <label htmlFor=\"contactReportNumber\">Contact Report Number</label>\r\n        <StyledInput\r\n          type=\"number\"\r\n          id=\"contactReportNumber\"\r\n          name=\"contactReportNumber\"\r\n          value={form.contactReportNumber}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.contactReportNumber && (\r\n          <p className=\"error\">{errors.contactReportNumber}</p>\r\n        )}\r\n\r\n        <label htmlFor=\"contactReportEmail\">Contact Report Email</label>\r\n        <StyledInput\r\n          type=\"email\"\r\n          id=\"contactReportEmail\"\r\n          name=\"contactReportEmail\"\r\n          value={form.contactReportEmail}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.contactReportEmail && (\r\n          <p className=\"error\">{errors.contactReportEmail}</p>\r\n        )}\r\n\r\n        <label htmlFor=\"firstNameManager\">First Name (Manager)</label>\r\n        <StyledInput\r\n          type=\"text\"\r\n          id=\"firstNameManager\"\r\n          name=\"firstNameManager\"\r\n          value={form.firstNameManager}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.firstNameManager && (\r\n          <p className=\"error\">{errors.firstNameManager}</p>\r\n        )}\r\n\r\n        <label htmlFor=\"lastNameManager\">Last Name (Manager)</label>\r\n        <StyledInput\r\n          type=\"text\"\r\n          id=\"lastNameManager\"\r\n          name=\"lastNameManager\"\r\n          value={form.lastNameManager}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.lastNameManager && (\r\n          <p className=\"error\">{errors.lastNameManager}</p>\r\n        )}\r\n\r\n        <label htmlFor=\"phoneNumberManager\">Phone Number (Manager)</label>\r\n        <StyledInput\r\n          type=\"number\"\r\n          id=\"phoneNumberManager\"\r\n          name=\"phoneNumberManager\"\r\n          value={form.phoneNumberManager}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.phoneNumberManager && (\r\n          <p className=\"error\">{errors.phoneNumberManager}</p>\r\n        )}\r\n        <label htmlFor=\"emailAddressManager\">Email Address (Manager)</label>\r\n        <StyledInput\r\n          type=\"email\"\r\n          id=\"emailAddressManager\"\r\n          name=\"emailAddressManager\"\r\n          value={form.emailAddressManager}\r\n          onChange={handleChange}\r\n        />\r\n        {errors.emailAddressManager && (\r\n          <p className=\"error\">{errors.emailAddressManager}</p>\r\n        )}\r\n        <StyledFieldset\r\n          type=\"checkbox\"\r\n          id=\"signed\"\r\n          name=\"signed\"\r\n          checked={form.signed}\r\n          onChange={(event) =>\r\n            setForm({ ...form, signed: event.target.checked })\r\n          }\r\n        >\r\n          <legend>Signed?</legend>\r\n                <label>\r\n                  <input type=\"radio\" value=\"Yes\" name=\"signed\" />\r\n                  Yes\r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" value=\"No\" name=\"signed\" />\r\n                  No\r\n                </label>\r\n            </StyledFieldset>\r\n        {errors.signed && <p className=\"error\">{errors.signed}</p>}\r\n\r\n        <StyledButton type=\"submit\">Update Incident</StyledButton>\r\n      </StyledForm>\r\n    </StyledFormWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditIncident;","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\editAccident.js",["159"],[],"import { useNavigate } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport styled, {createGlobalStyle, css} from 'styled-components';\r\n\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height: 100%;\r\n  }\r\n  body{\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    background: linear-gradient(to top, #d1913c, #ffd194);\r\n    background-attachment: fixed;\r\n    height: 100%;\r\n    margin: 0;\r\n    color: 555;\r\n  }\r\n  input::-webkit-outer-spin-button,\r\n  input::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n`\r\nconst sharedStyles = css`\r\n  background-color: #eee;\r\n  height: 40px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ddd;\r\n  margin: 10px 0 20px 0;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n` \r\n\r\nconst StyledFormWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 2%;\r\n  height: 100%;\r\n  padding: 0 20px;\r\n  padding-bottom: 2%;\r\n`\r\nconst StyledForm = styled.form`\r\n  width: 100%;\r\n  max-width: 1000px;\r\n  padding: 40px; \r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  box-shadow: 0px 0px 20px 0px rgba(0,0,0,0.2);\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  display: block;\r\n  width: 100%;\r\n  ${sharedStyles}\r\n`\r\nconst StyledTextArea = styled.textarea`\r\n  background-color: #eee;\r\n  width: 100%;\r\n  min-height: 100px;\r\n  resize: none;\r\n  ${sharedStyles}\r\n`\r\n\r\nconst StyledButton = styled.button`\r\n  display: block;\r\n  background-color: #D1913C;\r\n  color: #fff;\r\n  font-size: .9rem;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  height: 40px;\r\n  padding: 0 20px;\r\n  cursor: pointer;\r\n  boz-sizing: border-box;\r\n`\r\n\r\nconst StyledFieldset = styled.fieldset`\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin: 20px 0;\r\n  \r\n  legend{\r\n    padding: 0 10px;\r\n  }\r\n  label{\r\n    padding-right: 20px;\r\n  }\r\n  input{\r\n    margin-right: 10px;\r\n  }\r\n  `\r\nconst StyledError = styled.div`\r\n  color: red;\r\n  font-weight: 800;\r\n  margin: 0 0 40px 0;\r\n`\r\n\r\n\r\n\r\nconst EditAccident = () => {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const [errors, setErrors] = useState({});\r\n      const [form, setForm] = useState({\r\n        accidentReportNumber: '',\r\n        studentID: '',\r\n        employeeID: '',\r\n        school: '',\r\n        room: '',\r\n        date: '',\r\n        location: '',\r\n        employeeIDInvolved: '',\r\n        studentIDInvolved: '',\r\n        cause: '',\r\n        response: '',\r\n        preventativeAction: '',\r\n        witnesses: '',\r\n        signed: '',\r\n      });\r\n      const formatDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        return date.toISOString().split('T')[0];\r\n      };\r\n      const validateForm = (form) => {\r\n        const errors = {};\r\n      \r\n        for (const key in validationRules) {\r\n          const rule = validationRules[key];\r\n          const value = form[key];\r\n      \r\n          if (rule.required && (value === null || value === '')) {\r\n            errors[key] = `${key} is required`;\r\n          } else if (rule.type && typeof value !== rule.type) {\r\n            errors[key] = `${key} must be a ${rule.type}`;\r\n          }\r\n        }\r\n      \r\n        return errors;\r\n      };\r\n      const validationRules = {\r\n        accidentReportNumber: { required: true, type: 'number' },\r\n        studentID: { required: true, type: 'number' },\r\n        employeeID: { required: true, type: 'number' },\r\n        school: { required: true, type: 'string' },\r\n        room: { required: true, type: 'string' },\r\n        date: { required: true, type: 'string' },\r\n        location: { required: true, type: 'string' },\r\n        employeeIDInvolved: { required: false, type: 'number' },\r\n        studentIDInvolved: { required: false, type: 'number' },\r\n        cause: { required: true, type: 'string' },\r\n        response: { required: true, type: 'string' },\r\n        preventativeAction: { required: true, type: 'string' },\r\n        witnesses: { required: false, type: 'string' },\r\n        signed: { required: true, type: 'string' },\r\n      };\r\n\r\n      useEffect(() => {\r\n        const getAccident = async () => {\r\n          try {\r\n            const res = await axios.get(`http://localhost:3000/accidents/${id}`);\r\n            const accidentData = res.data.accident;\r\n            accidentData.date = formatDate(accidentData.date);\r\n            setForm(accidentData);\r\n          } catch (error) {\r\n            console.error(\"Failed to fetch accident data:\", error);\r\n          }\r\n        };\r\n        getAccident();\r\n      }, [id]);\r\n      const removeCircularReferences = (obj) => {\r\n        const seen = new WeakSet();\r\n        return JSON.parse(JSON.stringify(obj, (key, value) => {\r\n          if (typeof value === 'object' && value !== null) {\r\n            if (seen.has(value)) {\r\n              return;\r\n            }\r\n            seen.add(value);\r\n          }\r\n          return value;\r\n        }));\r\n      };\r\n      const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n      \r\n        const errors = validateForm(form);\r\n        const hasErrors = Object.keys(errors).length > 0;\r\n      \r\n        setErrors(errors); // Add this line to update the errors state\r\n      \r\n        if (hasErrors) {\r\n          console.error(\"Form validation errors:\", errors);\r\n        } else {\r\n          const formWithoutCircularReferences = removeCircularReferences(form);\r\n          await axios.put(`http://localhost:3000/accidents/${id}`, formWithoutCircularReferences);\r\n          navigate('/accidents');\r\n        }\r\n      };\r\n    return (\r\n            <>\r\n      <GlobalStyle/>\r\n      <StyledFormWrapper>\r\n        <StyledForm onSubmit={handleSubmit}>\r\n        <h2>Edit Accident</h2>\r\n\r\n         <div style={{display: 'grid', gridGap: '10px', gridTemplateColumns: '50% 50%' }}>     \r\n         <div>\r\n        <label htmlFor=\"accidentReportNumber\">Accident Report Number:</label>\r\n        <StyledInput\r\n          onChange={(event) => setForm({ ...form, accidentReportNumber: event.target.value })}\r\n          value={form.accidentReportNumber}\r\n          type=\"number\"\r\n          name=\"accidentReportNumber\"\r\n          disabled\r\n        />\r\n        {errors.accidentReportNumber && <StyledError>{errors.accidentReportNumber}</StyledError>}\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"studentID\">Student ID:</label>\r\n          <StyledInput\r\n          onChange={(event) => setForm({ ...form, studentID: event.target.value })}\r\n            value={form.studentID}\r\n            name=\"studentID\"\r\n          />\r\n          {errors.studentID && <StyledError>{errors.studentID}</StyledError>}\r\n        </div>\r\n        </div>\r\n\r\n        <label htmlFor=\"school\">School:</label>\r\n        <StyledInput\r\n          onChange={(event) => setForm({ ...form, school: event.target.value })}\r\n          value={form.school}\r\n          name=\"school\"\r\n        />\r\n        {errors.school && <StyledError>{errors.school}</StyledError>}\r\n        \r\n        <div style={{display: 'grid', gridGap: '10px', gridTemplateColumns: '50% 50%' }}>\r\n        <div>\r\n        <label htmlFor=\"employeeID\">Employee ID:</label>\r\n        <StyledInput\r\n          onChange={(event) => setForm({ ...form, employeeID: event.target.value })}\r\n          value={form.employeeID}\r\n          name=\"employeeID\"\r\n        />\r\n        {errors.employeeID && <StyledError>{errors.employeeID}</StyledError>}\r\n        </div>\r\n        <div>\r\n        <label htmlFor=\"room\">Room:</label>\r\n        <StyledInput\r\n          onChange={(event) => setForm({ ...form, room: event.target.value })}\r\n          value={form.room}\r\n          name=\"room\"\r\n        />\r\n        {errors.room && <StyledError>{errors.room}</StyledError>}\r\n        </div>\r\n        </div>\r\n        <label htmlFor=\"date\">Date:</label>\r\n        <StyledInput\r\n          onChange={(event) => setForm({ ...form, Date: event.target.value })}\r\n          value={form.date}\r\n          type=\"date\"\r\n          name=\"date\"\r\n          style={{width: '50%'}}\r\n        />\r\n        {errors.date && <StyledError>{errors.date}</StyledError>}\r\n\r\n        <label htmlFor=\"location\">Location:</label>\r\n        <StyledInput\r\n          onChange={(event) => setForm({ ...form, location: event.target.value })}\r\n          value={form.location}\r\n          name=\"location\"\r\n        />\r\n        {errors.location && <StyledError>{errors.location}</StyledError>}\r\n        \r\n        <div style={{display: 'grid', gridGap: '10px', gridTemplateColumns: '50% 50%' }}>\r\n          <div>\r\n          <label htmlFor=\"employeeIDInvolved\">Staff Involved:</label>\r\n          <StyledInput\r\n            onChange={(event) => setForm({ ...form, employeeIDInvolved: event.target.value })}\r\n            value={form.employeeIDInvolved}\r\n            name=\"employeeIDInvolved\"\r\n            type=\"number\"\r\n          />\r\n      {errors.employeeIDInvolved && <StyledError>{errors.employeeIDInvolved}</StyledError>}\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"supervisorID\">Supervisor ID:</label>\r\n        <StyledInput\r\n          onChange={(event) => setForm({ ...form, supervisorID: event.target.value })}\r\n          value={form.supervisorID}\r\n          name=\"supervisorID\"\r\n          type=\"number\"\r\n        />\r\n        {errors.supervisorID && <StyledError>{errors.supervisorID}</StyledError>}\r\n      </div>\r\n    </div>\r\n\r\n    <label htmlFor=\"description\">Description of Accident:</label>\r\n    <StyledTextArea\r\n      onChange={(event) => setForm({ ...form, description: event.target.value })}\r\n      value={form.description}\r\n      name=\"description\"\r\n    />\r\n    {errors.description && <StyledError>{errors.description}</StyledError>}\r\n\r\n    <label htmlFor=\"actionTaken\">Action Taken:</label>\r\n    <StyledTextArea\r\n      onChange={(event) => setForm({ ...form, actionTaken: event.target.value })}\r\n      value={form.actionTaken}\r\n      name=\"actionTaken\"\r\n    />\r\n    {errors.actionTaken && <StyledError>{errors.actionTaken}</StyledError>}\r\n\r\n    <StyledButton type=\"submit\">Update</StyledButton>\r\n  </StyledForm>\r\n  </StyledFormWrapper>\r\n</>\r\n    );\r\n    };\r\n  export default EditAccident;","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\editStudent.js",["160","161","162","163"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport styled, {createGlobalStyle, css} from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height: 100%;\r\n\r\n  }\r\n\r\n  body{\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    background: linear-gradient(to top, #d1913c, #ffd194);\r\n    background-attachment: fixed;\r\n    height: 100%;\r\n    margin: 0;\r\n    color: 555;\r\n  }\r\n`\r\nconst sharedStyles = css`\r\n  background-color: #eee;\r\n  height: 40px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ddd;\r\n  margin: 10px 0 20px 0;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n` \r\n\r\nconst StyledFormWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 2%;\r\n  height: 100%;\r\n  padding: 0 20px;\r\n  padding-bottom: 2%;\r\n\r\n`\r\nconst StyledForm = styled.form`\r\n  width: 100%;\r\n  max-width: 1000px;\r\n  padding: 40px; \r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  box-shadow: 0px 0px 20px 0px rgba(0,0,0,0.2);\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  display: block;\r\n  width: 100%;\r\n  ${sharedStyles}\r\n\r\n`\r\nconst StyledTextArea = styled.textarea`\r\n\r\n`\r\n\r\nconst StyledButton = styled.button`\r\n  display: block;\r\n  background-color: #D1913C;\r\n  color: #fff;\r\n  font-size: .9rem;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  height: 40px;\r\n  padding: 0 20px;\r\n  cursor: pointer;\r\n  boz-sizing: border-box;\r\n\r\n`\r\n\r\nconst styledFieldset = styled.fieldset`\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin: 20px 0;\r\n  \r\n  legend{\r\n    padding: 0 10px;\r\n  }\r\n\r\n  label{\r\n    padding-right: 20px;\r\n  }\r\n\r\n  input{\r\n    margin-right: 10px;\r\n  }\r\n  `\r\nconst StyledError = styled.div`\r\n  color: red;\r\n  font-weight: 800;\r\n  margin: 0 0 40px 0;\r\n`\r\n\r\n\r\n\r\n\r\nconst EditStudent = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [errors, setErrors] = useState({});\r\n  const [form, setForm] = useState({\r\n    studentID: '',\r\n    name: '',\r\n    address: '',\r\n    gpa: '',\r\n    grade: '',\r\n    firstNameFirstGuardian: '',\r\n    lastNameFirstGuardian: '',\r\n    firstNameSecondGuardian: '',\r\n    lastNameSecondGuardian: '',\r\n    emergencyNumber: '',\r\n    enrollmentDate: '',\r\n    graduationDate: '',\r\n    isActive: '',\r\n  });\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return date.toISOString().split('T')[0];\r\n  };\r\n  const validateForm = (form) => {\r\n    const errors = {};\r\n  \r\n    for (const key in validationRules) {\r\n      const rule = validationRules[key];\r\n      const value = form[key];\r\n  \r\n      if (rule.required && (value === null || value === '')) {\r\n        errors[key] = `${key} is required`;\r\n      } else if (rule.type && typeof value !== rule.type) {\r\n        errors[key] = `${key} must be a ${rule.type}`;\r\n      } else if (rule.min !== undefined && value < rule.min) {\r\n        errors[key] = `${key} must be at least ${rule.min}`;\r\n      } else if (rule.max !== undefined && value > rule.max) {\r\n        errors[key] = `${key} must be at most ${rule.max}`;\r\n      }\r\n    }\r\n  \r\n    return errors;\r\n  };\r\n  const validationRules = {\r\n    studentID: { required: true, type: 'number' },\r\n    name: { required: true, type: 'string' },\r\n    address: { required: true, type: 'string' },\r\n    gpa: { required: true, type: 'number', min: 0, max: 4 },\r\n    grade: { required: true, type: 'string' },\r\n    firstNameFirstGuardian: { required: false, type: 'string' },\r\n    lastNameFirstGuardian: { required: false, type: 'string' },\r\n    firstNameSecondGuardian: { required: false, type: 'string' },\r\n    lastNameSecondGuardian: { required: false, type: 'string' },\r\n    emergencyNumber: { required: true, type: 'number' },\r\n    enrollmentDate: { required: true, type: 'string' },\r\n    graduationDate: { required: true, type: 'string' },\r\n    isActive: { required: true, type: 'number', min: 0, max: 1 },\r\n  };\r\n useEffect(() => {\r\n    const getStudent = async () => {\r\n      try {\r\n        const res = await axios.get(`http://localhost:3000/students/${id}`);\r\n        const studentData = res.data.student;\r\n        studentData.enrollmentDate = formatDate(studentData.enrollmentDate);\r\n        studentData.graduationDate = formatDate(studentData.graduationDate);\r\n        setForm(studentData);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch student data:\", error);\r\n      }\r\n    };\r\n    getStudent();\r\n  }, [id]);\r\n\r\n  const removeCircularReferences = (obj) => {\r\n    const seen = new WeakSet();\r\n    return JSON.parse(JSON.stringify(obj, (key, value) => {\r\n      if (typeof value === 'object' && value !== null) {\r\n        if (seen.has(value)) {\r\n          return;\r\n        }\r\n        seen.add(value);\r\n      }\r\n      return value;\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n  \r\n    const errors = validateForm(form);\r\n    const hasErrors = Object.keys(errors).length > 0;\r\n  \r\n    if (hasErrors) {\r\n      console.error(\"Form validation errors:\", errors);\r\n      setErrors(errors);\r\n    } else {\r\n      const formWithoutCircularReferences = removeCircularReferences(form);\r\n      await axios.put(`http://localhost:3000/students/${id}`, formWithoutCircularReferences);\r\n      navigate('/students');\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n    <GlobalStyle/>\r\n    <StyledFormWrapper>\r\n  <StyledForm onSubmit={handleSubmit}>\r\n  <h2 style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>Edit Student</h2>\r\n  <label htmlFor=\"studentID\">Student ID: </label>\r\n  <StyledInput \r\n    type=\"number\"\r\n    name=\"studentID\"\r\n    value={form.studentID || ''}\r\n    onChange={(e) => setForm({ ...form, studentID: parseInt(e.target.value) })}\r\n  />\r\n\r\n  <label id=\"name\">Name: </label>\r\n  <StyledInput \r\n    type=\"text\"\r\n    name=\"name\"\r\n    value={form.name || ''}\r\n    onChange={(e) => setForm({ ...form, name: e.target.value })}\r\n  />\r\n\r\n  <label htmlFor=\"address\" id=\"address\">Address: </label>\r\n  <StyledInput \r\n    name=\"address\"\r\n    value={form.address || ''}\r\n    onChange={(e) => setForm({ ...form, address: e.target.value })}\r\n  />\r\n\r\n  <div style={{display: 'grid', gridGap: '10px', gridTemplateColumns: '1fr 1fr' }}>\r\n    <div>\r\n      <label htmlFor=\"gpa\" id=\"gpa\">GPA: </label>\r\n      <StyledInput\r\n        type=\"number\"\r\n        name=\"gpa\"\r\n        value={form.gpa || ''}\r\n        onChange={(e) => setForm({ ...form, gpa: parseFloat(e.target.value) })}\r\n        style={{\r\n          width: '100%',\r\n          backgroundColor: '#eee',\r\n          height: '40px',\r\n          borderRadius: '5px',\r\n          border: '1px solid #ddd',\r\n          margin: '10px 0 20px 0',\r\n          padding: '20px',\r\n          boxSizing: 'border-box'\r\n        }}\r\n      />\r\n    </div>\r\n    <div>\r\n      <label htmlFor=\"grade\" id=\"grade\">Grade: </label>\r\n      <StyledInput\r\n        name=\"grade\"\r\n        value={form.grade || ''}\r\n        onChange={(e) => setForm({ ...form, grade: e.target.value })}\r\n        style={{\r\n          width: '100%',\r\n          backgroundColor: '#eee',\r\n          height: '40px',\r\n          borderRadius: '5px',\r\n          border: '1px solid #ddd',\r\n          margin: '10px 0 20px 0',\r\n          padding: '20px',\r\n          boxSizing: 'border-box'\r\n        }}\r\n      />\r\n    </div>\r\n  </div>\r\n      \r\n    <label htmlFor=\"firstNameFirstGuardian\" id=\"firstNameFirstGuardian\">First Name 1st Guardian: </label>\r\n    <StyledInput\r\n      name=\"firstNameFirstGuardian\"\r\n      value={form.firstNameFirstGuardian || ''}\r\n      onChange={(e) => setForm({ ...form, firstNameFirstGuardian: e.target.value })}\r\n    />\r\n\r\n    <label htmlFor=\"lastNameFirstGuardian\" id=\"lastNameFirstGuardian\">Last Name 1st Guardian: </label>\r\n    <StyledInput\r\n      name=\"lastNameFirstGuardian\"\r\n      value={form.lastNameFirstGuardian || ''}\r\n      onChange={(e) => setForm({ ...form, lastNameFirstGuardian: e.target.value })}\r\n    />\r\n\r\n    <label htmlFor=\"firstNameSecondGuardian\" id=\"firstNameSecondGuardian\">First Name 2nd Guardian: </label>\r\n    <StyledInput\r\n      name=\"firstNameSecondGuardian\"\r\n      value={form.firstNameSecondGuardian || ''}\r\n      onChange={(e) => setForm({ ...form, firstNameSecondGuardian: e.target.value })}\r\n    />\r\n\r\n    <label htmlFor=\"lastNameSecondGuardian\" id=\"lastNameSecondGuardian\">Last Name 2nd Guardian: </label>\r\n    <StyledInput\r\n      name=\"lastNameSecondGuardian\"\r\n      value={form.lastNameSecondGuardian || ''}\r\n      onChange={(e) => setForm({ ...form, lastNameSecondGuardian: e.target.value })}\r\n    />\r\n\r\n    <label htmlFor=\"emergencyNumber\" id=\"emergencyNumber\">Emergency Number: </label>\r\n    <StyledInput\r\n      type=\"number\"\r\n      name=\"emergencyNumber\"\r\n      value={form.emergencyNumber || ''}\r\n      onChange={(e) => setForm({ ...form, emergencyNumber: parseInt(e.target.value) })}\r\n    />\r\n\r\n    <label htmlFor=\"enrollmentDate\" id=\"enrollmentDate\">Enrollment Date: </label>\r\n    <StyledInput\r\n      type=\"date\"\r\n      name=\"enrollmentDate\"\r\n      value={form.enrollmentDate || ''}\r\n      onChange={(e) => setForm({ ...form, enrollmentDate: e.target.value })}\r\n    />\r\n\r\n    <label htmlFor=\"graduationDate\" id=\"graduationDate\">Grad date: </label>\r\n    <StyledInput\r\n      type=\"date\"\r\n      name=\"graduationDate\"\r\n      value={form.graduationDate || ''}\r\n      onChange={(e) => setForm({ ...form, graduationDate: e.target.value })}\r\n    />\r\n\r\n    <StyledInput type=\"hidden\" name=\"isActive\" value=\"1\" />\r\n\r\n    <StyledButton type=\"submit\">Update Student</StyledButton>\r\n    </StyledForm>\r\n    </StyledFormWrapper>\r\n  </>\r\n  );\r\n};\r\n\r\nexport default EditStudent;","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\pages\\editReferral.js",["164","165","166"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport styled, {createGlobalStyle, css} from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height: 100%;\r\n\r\n  }\r\n\r\n  body{\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    background: linear-gradient(to top, #d1913c, #ffd194);\r\n    background-attachment: fixed;\r\n    height: 100%;\r\n    margin: 0;\r\n    color: 555;\r\n  }\r\n  input::-webkit-outer-spin-button,\r\n  input::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n`\r\nconst sharedStyles = css`\r\n  background-color: #eee;\r\n  height: 40px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ddd;\r\n  margin: 10px 0 20px 0;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n` \r\n\r\nconst StyledFormWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 2%;\r\n  height: 100%;\r\n  padding: 0 20px;\r\n  padding-bottom: 2%;\r\n\r\n`\r\nconst StyledForm = styled.form`\r\n  width: 100%;\r\n  max-width: 1000px;\r\n  padding: 40px; \r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  box-shadow: 0px 0px 20px 0px rgba(0,0,0,0.2);\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  display: block;\r\n  width: 100%;\r\n  ${sharedStyles}\r\n\r\n`\r\nconst StyledTextArea = styled.textarea`\r\n\r\n`\r\n\r\nconst StyledButton = styled.button`\r\n  display: block;\r\n  background-color: #D1913C;\r\n  color: #fff;\r\n  font-size: .9rem;\r\n  border: 0;\r\n  border-radius: 5px;\r\n  height: 40px;\r\n  padding: 0 20px;\r\n  cursor: pointer;\r\n  boz-sizing: border-box;\r\n\r\n`\r\n\r\nconst StyledFieldset = styled.fieldset`\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin: 20px 0;\r\n  \r\n  legend{\r\n    padding: 0 10px;\r\n  }\r\n\r\n  label{\r\n    padding-right: 20px;\r\n  }\r\n\r\n  input{\r\n    margin-right: 10px;\r\n  }\r\n  `\r\nconst StyledError = styled.div`\r\n  color: red;\r\n  font-weight: 800;\r\n  margin: 0 0 40px 0;\r\n`\r\n\r\n\r\nconst EditReferral = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [form, setForm] = useState({\r\n    referralNumber: '',\r\n    studentID: '',\r\n    studentName: '',\r\n    date: '',\r\n    cause: '',\r\n    action: '',\r\n    employeeID: '',\r\n    parentPhoneNumber: '',\r\n  });\r\n\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return date.toISOString().split('T')[0];\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setForm({ ...form, [name]: value });\r\n  };\r\n\r\n  const validateForm = (form) => {\r\n    const errors = {};\r\n\r\n    for (const key in validationRules) {\r\n      const rule = validationRules[key];\r\n      const value = form[key];\r\n\r\n      if (rule.required && (value === null || value === '')) {\r\n        errors[key] = `${key} is required`;\r\n      } else if (rule.type && typeof value !== rule.type) {\r\n        errors[key] = `${key} must be a ${rule.type}`;\r\n      }\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  const validationRules = {\r\n    referralNumber: { required: true, type: 'number' },\r\n    studentID: { required: true, type: 'number' },\r\n    studentName: { required: true, type: 'string' },\r\n    date: { required: true, type: 'string' },\r\n    cause: { required: true, type: 'string' },\r\n    action: { required: true, type: 'string' },\r\n    employeeID: { required: true, type: 'number' },\r\n    parentPhoneNumber: { required: true, type: 'number' },\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getReferral = async () => {\r\n      try {\r\n        const res = await axios.get(`http://localhost:3000/referrals/${id}`);\r\n        const referralData = res.data.referral;\r\n        referralData.date = formatDate(referralData.date);\r\n        setForm(referralData);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch referral data:\", error);\r\n      }\r\n    };\r\n    getReferral();\r\n  }, [id]);\r\n\r\n  const removeCircularReferences = (obj) => {\r\n    const seen = new WeakSet();\r\n    return JSON.parse(JSON.stringify(obj, (key, value) => {\r\n      if (typeof value === 'object' && value !== null) {\r\n        if (seen.has(value)) {\r\n          return;\r\n        }\r\n        seen.add(value);\r\n      }\r\n      return value;\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n  \r\n    const errors = validateForm(form);\r\n    const hasErrors = Object.keys(errors).length > 0;\r\n  \r\n    if (hasErrors) {\r\n      console.error(\"Form validation errors:\", errors);\r\n      setErrors(errors);\r\n    } else {\r\n      const formWithoutCircularReferences = removeCircularReferences(form);\r\n      await axios.put(`http://localhost:3000/referrals/${id}`, formWithoutCircularReferences);\r\n      navigate('/referrals');\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n    <GlobalStyle/>\r\n    <StyledFormWrapper>\r\n\r\n      <StyledForm onSubmit={handleSubmit}>\r\n      <h2 style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>Edit Referral</h2>\r\n      <label htmlFor=\"referralNumber\">Referral Number: </label>\r\n    <StyledInput\r\n      type=\"number\"\r\n      id=\"referralNumber\"\r\n      name=\"referralNumber\"\r\n      value={form.referralNumber}\r\n      onChange={handleChange}\r\n      disabled\r\n    />\r\n    {errors.referralNumber && (\r\n      <p className=\"error\">{errors.referralNumber}</p>\r\n    )}\r\n\r\n    <label htmlFor=\"studentID\">Student ID: </label>\r\n    <StyledInput\r\n      type=\"number\"\r\n      id=\"studentID\"\r\n      name=\"studentID\"\r\n      value={form.studentID}\r\n      onChange={handleChange}\r\n    />\r\n    {errors.studentID && <p className=\"error\">{errors.studentID}</p>}\r\n\r\n    <label htmlFor=\"studentName\">Student Name: </label>\r\n    <StyledInput\r\n      type=\"text\"\r\n      id=\"studentName\"\r\n      name=\"studentName\"\r\n      value={form.studentName}\r\n      onChange={handleChange}\r\n    />\r\n    {errors.studentName && (\r\n      <p className=\"error\">{errors.studentName}</p>\r\n    )}\r\n\r\n    <label htmlFor=\"date\">Date: </label>\r\n    <StyledInput\r\n      type=\"date\"\r\n      id=\"date\"\r\n      name=\"date\"\r\n      value={form.date}\r\n      onChange={handleChange}\r\n    />\r\n    {errors.date && <p className=\"error\">{errors.date}</p>}\r\n\r\n    <label htmlFor=\"cause\">Cause: </label>\r\n    <StyledInput\r\n      type=\"text\"\r\n      id=\"cause\"\r\n      name=\"cause\"\r\n      value={form.cause}\r\n      onChange={handleChange}\r\n    />\r\n    {errors.cause && <p className=\"error\">{errors.cause}</p>}\r\n\r\n    <label htmlFor=\"action\">Action: </label>\r\n    <StyledInput\r\n      type=\"text\"\r\n      id=\"action\"\r\n      name=\"action\"\r\n      value={form.action}\r\n      onChange={handleChange}\r\n    />\r\n    {errors.action && <p className=\"error\">{errors.action}</p>}\r\n\r\n    <label htmlFor=\"employeeID\">Employee ID: </label>\r\n    <StyledInput\r\n      type=\"number\"\r\n      id=\"employeeID\"\r\n      name=\"employeeID\"\r\n      value={form.employeeID}\r\n      onChange={handleChange}\r\n    />\r\n    {errors.employeeID && (\r\n      <p className=\"error\">{errors.employeeID}</p>\r\n    )}\r\n\r\n    <label htmlFor=\"parentPhoneNumber\">Parent Contact Number: </label>\r\n    <StyledInput\r\n      type=\"number\"\r\n      id=\"parentPhoneNumber\"\r\n      name=\"parentPhoneNumber\"\r\n      value={form.parentPhoneNumber}\r\n      onChange={handleChange}\r\n    />\r\n    {errors.parentPhoneNumber && (\r\n      <p className=\"error\">{errors.parentPhoneNumber}</p>\r\n    )}\r\n\r\n    <StyledButton type=\"submit\">Update Referral</StyledButton>\r\n  </StyledForm>\r\n  </StyledFormWrapper>\r\n</>\r\n\r\n);\r\n};\r\n\r\nexport default EditReferral;","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\components\\Navbar\\index.js",["167"],[],"import React from 'react'\r\nimport {Nav , NavLink, Bars, NavMenu, NavBtn, NavBtnLink} from \"./NavbarElements\";\r\nimport Logo from './images/CSLogo.png'\r\nimport { AuthContext } from '../../authContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useContext } from 'react';\r\nconst Navbar = () => {\r\n  const { logout } = useContext(AuthContext);\r\n  const navigate = useNavigate();\r\n  const handleLogout = () => {\r\n    logout();\r\n    navigate('/');\r\n  };\r\n  return (\r\n    <>\r\n    <Nav>\r\n    <NavLink to=\"/dashboard\">\r\n            Home\r\n        </NavLink>\r\n        <Bars />\r\n        <NavMenu>\r\n            <NavLink to=\"/students\" activeStyle>Students</NavLink>\r\n\r\n            <NavLink to=\"/accidents\" activeStyle>Accidents</NavLink>\r\n\r\n            <NavLink to=\"/incidents\" activeStyle>Incidents</NavLink>\r\n\r\n            <NavLink to=\"/referrals\" activeStyle>Referrals</NavLink>\r\n\r\n            <NavLink to=\"/profile\" activeStyle>Profile</NavLink>\r\n        </NavMenu>\r\n        <NavBtn>\r\n        <NavBtnLink to=\"/\" onClick={handleLogout}>Log Out</NavBtnLink>\r\n        </NavBtn>\r\n    </Nav>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Navbar;","C:\\Users\\Noah Linton\\Documents\\repos\\carpenterServer\\client\\src\\components\\Navbar\\NavbarElements.js",[],[],{"ruleId":"168","severity":1,"message":"169","line":7,"column":8,"nodeType":"170","messageId":"171","endLine":7,"endColumn":14},{"ruleId":"168","severity":1,"message":"172","line":7,"column":17,"nodeType":"170","messageId":"171","endLine":7,"endColumn":34},{"ruleId":"168","severity":1,"message":"173","line":7,"column":36,"nodeType":"170","messageId":"171","endLine":7,"endColumn":39},{"ruleId":"168","severity":1,"message":"169","line":6,"column":8,"nodeType":"170","messageId":"171","endLine":6,"endColumn":14},{"ruleId":"168","severity":1,"message":"173","line":6,"column":36,"nodeType":"170","messageId":"171","endLine":6,"endColumn":39},{"ruleId":"168","severity":1,"message":"169","line":2,"column":8,"nodeType":"170","messageId":"171","endLine":2,"endColumn":14},{"ruleId":"168","severity":1,"message":"173","line":2,"column":36,"nodeType":"170","messageId":"171","endLine":2,"endColumn":39},{"ruleId":"168","severity":1,"message":"174","line":56,"column":7,"nodeType":"170","messageId":"171","endLine":56,"endColumn":21},{"ruleId":"168","severity":1,"message":"175","line":72,"column":7,"nodeType":"170","messageId":"171","endLine":72,"endColumn":21},{"ruleId":"168","severity":1,"message":"176","line":88,"column":7,"nodeType":"170","messageId":"171","endLine":88,"endColumn":18},{"ruleId":"177","severity":1,"message":"178","line":116,"column":36,"nodeType":"179","messageId":"180","endLine":116,"endColumn":81},{"ruleId":"168","severity":1,"message":"181","line":4,"column":9,"nodeType":"170","messageId":"171","endLine":4,"endColumn":16},{"ruleId":"168","severity":1,"message":"182","line":5,"column":10,"nodeType":"170","messageId":"171","endLine":5,"endColumn":18},{"ruleId":"168","severity":1,"message":"183","line":5,"column":20,"nodeType":"170","messageId":"171","endLine":5,"endColumn":31},{"ruleId":"168","severity":1,"message":"184","line":117,"column":17,"nodeType":"170","messageId":"171","endLine":117,"endColumn":25},{"ruleId":"168","severity":1,"message":"174","line":57,"column":7,"nodeType":"170","messageId":"171","endLine":57,"endColumn":21},{"ruleId":"168","severity":1,"message":"175","line":75,"column":7,"nodeType":"170","messageId":"171","endLine":75,"endColumn":21},{"ruleId":"168","severity":1,"message":"169","line":6,"column":8,"nodeType":"170","messageId":"171","endLine":6,"endColumn":14},{"ruleId":"168","severity":1,"message":"173","line":6,"column":36,"nodeType":"170","messageId":"171","endLine":6,"endColumn":39},{"ruleId":"168","severity":1,"message":"185","line":4,"column":10,"nodeType":"170","messageId":"171","endLine":4,"endColumn":23},{"ruleId":"168","severity":1,"message":"186","line":81,"column":7,"nodeType":"170","messageId":"171","endLine":81,"endColumn":21},{"ruleId":"168","severity":1,"message":"187","line":143,"column":9,"nodeType":"170","messageId":"171","endLine":143,"endColumn":21},{"ruleId":"188","severity":1,"message":"189","line":183,"column":6,"nodeType":"190","endLine":183,"endColumn":8,"suggestions":"191"},{"ruleId":"168","severity":1,"message":"169","line":6,"column":8,"nodeType":"170","messageId":"171","endLine":6,"endColumn":14},{"ruleId":"168","severity":1,"message":"173","line":6,"column":36,"nodeType":"170","messageId":"171","endLine":6,"endColumn":39},{"ruleId":"168","severity":1,"message":"169","line":6,"column":8,"nodeType":"170","messageId":"171","endLine":6,"endColumn":14},{"ruleId":"168","severity":1,"message":"173","line":6,"column":36,"nodeType":"170","messageId":"171","endLine":6,"endColumn":39},{"ruleId":"168","severity":1,"message":"174","line":63,"column":7,"nodeType":"170","messageId":"171","endLine":63,"endColumn":21},{"ruleId":"168","severity":1,"message":"186","line":81,"column":7,"nodeType":"170","messageId":"171","endLine":81,"endColumn":21},{"ruleId":"168","severity":1,"message":"184","line":108,"column":17,"nodeType":"170","messageId":"171","endLine":108,"endColumn":25},{"ruleId":"168","severity":1,"message":"192","line":24,"column":8,"nodeType":"170","messageId":"171","endLine":24,"endColumn":19},{"ruleId":"168","severity":1,"message":"193","line":24,"column":21,"nodeType":"170","messageId":"171","endLine":24,"endColumn":35},{"ruleId":"168","severity":1,"message":"194","line":146,"column":9,"nodeType":"170","messageId":"171","endLine":146,"endColumn":31},{"ruleId":"168","severity":1,"message":"195","line":174,"column":9,"nodeType":"170","messageId":"171","endLine":174,"endColumn":32},{"ruleId":"168","severity":1,"message":"174","line":63,"column":7,"nodeType":"170","messageId":"171","endLine":63,"endColumn":21},{"ruleId":"168","severity":1,"message":"176","line":103,"column":7,"nodeType":"170","messageId":"171","endLine":103,"endColumn":18},{"ruleId":"168","severity":1,"message":"186","line":81,"column":7,"nodeType":"170","messageId":"171","endLine":81,"endColumn":21},{"ruleId":"168","severity":1,"message":"174","line":57,"column":7,"nodeType":"170","messageId":"171","endLine":57,"endColumn":21},{"ruleId":"168","severity":1,"message":"175","line":75,"column":7,"nodeType":"170","messageId":"171","endLine":75,"endColumn":21},{"ruleId":"168","severity":1,"message":"176","line":93,"column":7,"nodeType":"170","messageId":"171","endLine":93,"endColumn":18},{"ruleId":"168","severity":1,"message":"196","line":105,"column":10,"nodeType":"170","messageId":"171","endLine":105,"endColumn":16},{"ruleId":"168","severity":1,"message":"174","line":62,"column":7,"nodeType":"170","messageId":"171","endLine":62,"endColumn":21},{"ruleId":"168","severity":1,"message":"186","line":80,"column":7,"nodeType":"170","messageId":"171","endLine":80,"endColumn":21},{"ruleId":"168","severity":1,"message":"176","line":98,"column":7,"nodeType":"170","messageId":"171","endLine":98,"endColumn":18},{"ruleId":"168","severity":1,"message":"197","line":3,"column":8,"nodeType":"170","messageId":"171","endLine":3,"endColumn":12},"no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar","'createGlobalStyle' is defined but never used.","'css' is defined but never used.","'StyledTextArea' is assigned a value but never used.","'styledFieldset' is assigned a value but never used.","'StyledError' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'NavLink' is defined but never used.","'Navigate' is defined but never used.","'useNavigate' is defined but never used.","'setError' is assigned a value but never used.","'FaBorderStyle' is defined but never used.","'StyledFieldset' is assigned a value but never used.","'validateForm' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array. You can also do a functional update 'setForm(f => ...)' if you only need 'form' in the 'setForm' call.","ArrayExpression",["198"],"'newPassword' is assigned a value but never used.","'setNewPassword' is assigned a value but never used.","'handleNewStudentSubmit' is assigned a value but never used.","'handleEditStudentSubmit' is assigned a value but never used.","'errors' is assigned a value but never used.","'Logo' is defined but never used.",{"desc":"199","fix":"200"},"Update the dependencies array to be: [form]",{"range":"201","text":"202"},[4415,4417],"[form]"]